[
    {
        "id": "26da8ec8a60a9d75",
        "type": "tab",
        "label": "Desktop",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "dda04585d20830a9",
        "type": "mqtt in",
        "z": "26da8ec8a60a9d75",
        "name": "EnvironIngest",
        "topic": "box/environ",
        "qos": "2",
        "datatype": "auto",
        "broker": "67b58dab33c9118c",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 90,
        "y": 180,
        "wires": [
            [
                "2418909845efda7f",
                "185e3b9fcda98629",
                "bd1455aba8d69b12",
                "e7c49100f19e6aab"
            ]
        ]
    },
    {
        "id": "86991f0964e90108",
        "type": "function",
        "z": "26da8ec8a60a9d75",
        "name": "tempGetter",
        "func": "\nvar p = JSON.parse(msg.payload)\n\nvar json = {\"topic\":\"temp\",\n    \"payload\":p[\"T\"]\n}\n\nreturn json\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 20,
        "wires": [
            [
                "5e56eb834c7783fe"
            ]
        ]
    },
    {
        "id": "2418909845efda7f",
        "type": "function",
        "z": "26da8ec8a60a9d75",
        "d": true,
        "name": "Environ to console",
        "func": "\n\nconsole.log(msg.payload)\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 170,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "c17e7f1d49086e7f",
        "type": "function",
        "z": "26da8ec8a60a9d75",
        "name": "co2getter",
        "func": "\nvar p = JSON.parse(msg.payload)\n\nglobal.set(\"co2\",p[\"co2\"]);\n\nvar json = {\"topic\":\"co2\",\n    \"payload\":p[\"co2\"]\n}\n\nreturn json\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 60,
        "wires": [
            [
                "5b707a8c12cc868f"
            ]
        ]
    },
    {
        "id": "d5c31c65e2b3e2fe",
        "type": "function",
        "z": "26da8ec8a60a9d75",
        "name": "humidityGetter",
        "func": "\nvar p = JSON.parse(msg.payload)\n\nvar json = {\"topic\":\"humidity\",\n    \"payload\":p[\"RH\"]\n}\n\nreturn json\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 120,
        "wires": [
            [
                "93fe1f0bd4359cb9",
                "931c1693c143c6b2"
            ]
        ]
    },
    {
        "id": "5d73c6ba0deb6825",
        "type": "mqtt out",
        "z": "26da8ec8a60a9d75",
        "name": "exhaust power control",
        "topic": "box/control/exhaust",
        "qos": "",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "67b58dab33c9118c",
        "x": 1100,
        "y": 740,
        "wires": []
    },
    {
        "id": "fc34d514afc4651b",
        "type": "function",
        "z": "26da8ec8a60a9d75",
        "name": "dehumidifierStateGetter",
        "func": "const itemCounter = (array, item) => {\n    return array.filter((currentItem) => currentItem == item).length;\n};\n\n\nvar p = JSON.parse(msg.payload)\n//console.log(p)\nvar dehumidifierState =\"\"\nif(!p.hasOwnProperty(\"dehumidState\")){return;}\n\n    \nif (p[\"dehumidState\"]) {\n    dehumidifierState  = 1\n}\nelse{\n    dehumidifierState  = 0\n}\n\n\nvar dehumidifierPastVals = global.get(\"dehumidStates\");\nif(dehumidifierPastVals == null){\n    dehumidifierPastVals = []\n}\nif(dehumidifierPastVals.length > 20){\n    dehumidifierPastVals.shift();\n}\ndehumidifierPastVals.push(dehumidifierState);\nglobal.set(\"dehumidStates\", dehumidifierPastVals);\n//node.warn(global.get(\"dehumidStates\"));\n\n\n\nvar ons = itemCounter(dehumidifierPastVals, 1);\nvar effectivePower = parseFloat((ons/dehumidifierPastVals.length) * 100).toFixed(2)\nconst effectivePowerString = String(effectivePower) + \"%\"\n//node.warn(effectivePower);\n//node.warn(effectivePowerString);\nflow.set(\"effectiveDehumidPower\", effectivePower)\n\n\nvar dehumidPowerPastVals = flow.get(\"dehumidPowerPastVals\")\nif(dehumidPowerPastVals == null){\n    dehumidPowerPastVals = []\n}\ndehumidPowerPastVals.push(parseFloat(effectivePower))\nif(dehumidPowerPastVals.length > 20){\n    dehumidPowerPastVals.shift();\n}\nflow.set(\"dehumidPowerPastVals\", dehumidPowerPastVals)\n\n\nvar statePayload = {\"topic\":\"dehumidifierState\",\n    \"payload\": dehumidifierState\n}\nvar effectivePowerStringPayload = {\"topic\":\"effectivePower\",\n    \"payload\": effectivePowerString\n}\n\nvar effectivePowerNumPayload = {\"topic\":\"effectivePower\",\n    \"payload\": effectivePower\n}\n\n\nreturn [statePayload, effectivePowerStringPayload, effectivePowerNumPayload];\n",
        "outputs": 3,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 240,
        "wires": [
            [
                "2e3e5e2ac8bb5f39",
                "e31045171627fcdf"
            ],
            [
                "3bec20de4cd4979c"
            ],
            [
                "40648a1fea3d5d1a"
            ]
        ]
    },
    {
        "id": "7fbf4177de5abb5e",
        "type": "function",
        "z": "26da8ec8a60a9d75",
        "name": "Dehumidifier bounds getter",
        "func": "\nvar p = JSON.parse(msg.payload)\n\nvar boundsText = p[\"lowerBound\"] + \" - \" + p[\"upperBound\"]\n\nvar json = {\"topic\":\"bounds\",\n    \"payload\": boundsText\n}\n\nreturn json\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 640,
        "wires": [
            [
                "c24c2453aa21d0fa"
            ]
        ]
    },
    {
        "id": "40aff9772cd6b366",
        "type": "mqtt out",
        "z": "26da8ec8a60a9d75",
        "name": "",
        "topic": "box/control/dehumidifier/auto",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "67b58dab33c9118c",
        "x": 1140,
        "y": 460,
        "wires": []
    },
    {
        "id": "e35dfd104af04611",
        "type": "mqtt out",
        "z": "26da8ec8a60a9d75",
        "name": "",
        "topic": "box/control/dehumidifier/press",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "67b58dab33c9118c",
        "x": 1110,
        "y": 220,
        "wires": []
    },
    {
        "id": "2079b9a05a59e9c0",
        "type": "function",
        "z": "26da8ec8a60a9d75",
        "name": "automatic dehumidifer control getter",
        "func": "\nvar p = JSON.parse(msg.payload)\nif(!p.hasOwnProperty(\"autoDehumid\")){return;}\n\nvar value =\"\"\nif (p[\"autoDehumid\"]) {\n    value  = \"on\"\n}\nelse {\n    value  = \"off\"\n}\n\n\n\nvar json = {\"topic\":\"autoDehumid\",\n    \"payload\": value\n}\n\n\nreturn json\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 460,
        "wires": [
            [
                "5bf7860e0bc7ac99"
            ]
        ]
    },
    {
        "id": "e31045171627fcdf",
        "type": "ui_switch",
        "z": "26da8ec8a60a9d75",
        "name": "",
        "label": "Dehumidifier state",
        "tooltip": "",
        "group": "49b8362b1f102d88",
        "order": 19,
        "width": "6",
        "height": "2",
        "passthru": false,
        "decouple": "true",
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "onvalue": "1",
        "onvalueType": "num",
        "onicon": "",
        "oncolor": "",
        "offvalue": "0",
        "offvalueType": "num",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 830,
        "y": 220,
        "wires": [
            [
                "e35dfd104af04611"
            ]
        ]
    },
    {
        "id": "5bf7860e0bc7ac99",
        "type": "ui_switch",
        "z": "26da8ec8a60a9d75",
        "name": "",
        "label": "auto dehumidifier control?",
        "tooltip": "",
        "group": "49b8362b1f102d88",
        "order": 20,
        "width": "5",
        "height": "1",
        "passthru": false,
        "decouple": "true",
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "onvalue": "on",
        "onvalueType": "str",
        "onicon": "",
        "oncolor": "",
        "offvalue": "off",
        "offvalueType": "str",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 870,
        "y": 460,
        "wires": [
            [
                "40aff9772cd6b366"
            ]
        ]
    },
    {
        "id": "42f49d5e6049d286",
        "type": "ui_slider",
        "z": "26da8ec8a60a9d75",
        "name": "Fan control slider",
        "label": "ExhaustPower",
        "tooltip": "",
        "group": "49b8362b1f102d88",
        "order": 14,
        "width": "5",
        "height": "1",
        "passthru": false,
        "outs": "end",
        "topic": "topic",
        "topicType": "msg",
        "min": 0,
        "max": "100",
        "step": "0.1",
        "className": "",
        "x": 830,
        "y": 740,
        "wires": [
            [
                "5d73c6ba0deb6825"
            ]
        ]
    },
    {
        "id": "c24c2453aa21d0fa",
        "type": "ui_text",
        "z": "26da8ec8a60a9d75",
        "d": true,
        "group": "49b8362b1f102d88",
        "order": 18,
        "width": "6",
        "height": "2",
        "name": "",
        "label": "Dehumidifier bounds",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "x": 840,
        "y": 640,
        "wires": []
    },
    {
        "id": "5e56eb834c7783fe",
        "type": "ui_chart",
        "z": "26da8ec8a60a9d75",
        "name": "tempChart",
        "group": "49b8362b1f102d88",
        "order": 4,
        "width": "12",
        "height": "4",
        "label": "Temp",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "10",
        "ymax": "",
        "removeOlder": "2",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 810,
        "y": 20,
        "wires": [
            []
        ]
    },
    {
        "id": "5b707a8c12cc868f",
        "type": "ui_chart",
        "z": "26da8ec8a60a9d75",
        "name": "co2chart",
        "group": "49b8362b1f102d88",
        "order": 1,
        "width": "12",
        "height": "5",
        "label": "co2",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "bezier",
        "nodata": "",
        "dot": false,
        "ymin": "400",
        "ymax": "3000",
        "removeOlder": "12",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9869c3",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 800,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "93fe1f0bd4359cb9",
        "type": "ui_chart",
        "z": "26da8ec8a60a9d75",
        "name": "HumidityChart",
        "group": "49b8362b1f102d88",
        "order": 5,
        "width": "12",
        "height": "4",
        "label": "humidity",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "bezier",
        "nodata": "",
        "dot": false,
        "ymin": "30",
        "ymax": "90",
        "removeOlder": "2",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 820,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "2e3e5e2ac8bb5f39",
        "type": "ui_chart",
        "z": "26da8ec8a60a9d75",
        "name": "DehumidiferStateChart",
        "group": "49b8362b1f102d88",
        "order": 17,
        "width": "10",
        "height": "3",
        "label": "Dehumidifer State",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "step",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "1",
        "removeOlder": "2",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 840,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "ab473525134d175f",
        "type": "file",
        "z": "26da8ec8a60a9d75",
        "name": "Save to ~/environ",
        "filename": "/home/pi/environ.csv",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 270,
        "y": 500,
        "wires": [
            []
        ]
    },
    {
        "id": "0c5d1ad61cebc300",
        "type": "function",
        "z": "26da8ec8a60a9d75",
        "name": "environ trimmer",
        "func": "var p = JSON.parse(msg.payload)\n\nvar time = new Date();\n\nvar json = {\"time\":time.getTime(),\n    \"temp\":p[\"T\"], \"humidity\":p[\"RH\"], \"co2\":p[\"co2\"], \"vpd\":p[\"vpd\"]\n}\n\nmsg.payload = json;\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 440,
        "wires": [
            [
                "ab473525134d175f"
            ]
        ]
    },
    {
        "id": "0ea4accf39062632",
        "type": "ui_slider",
        "z": "26da8ec8a60a9d75",
        "d": true,
        "name": "setlowerHumidityBound",
        "label": "lower humid bound",
        "tooltip": "",
        "group": "49b8362b1f102d88",
        "order": 23,
        "width": "8",
        "height": "1",
        "passthru": false,
        "outs": "end",
        "topic": "topic",
        "topicType": "msg",
        "min": "40",
        "max": "80",
        "step": "0.1",
        "className": "",
        "x": 130,
        "y": 640,
        "wires": [
            [
                "880f5debc7625235"
            ]
        ]
    },
    {
        "id": "880f5debc7625235",
        "type": "mqtt out",
        "z": "26da8ec8a60a9d75",
        "name": "send lowbound",
        "topic": "box/control/dehumidifier/lower",
        "qos": "",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "67b58dab33c9118c",
        "x": 160,
        "y": 680,
        "wires": []
    },
    {
        "id": "10d1b97823cb29e9",
        "type": "function",
        "z": "26da8ec8a60a9d75",
        "name": "lowerboundgetter",
        "func": "\nvar p = JSON.parse(msg.payload)\n\n\n\n\n\nvar json = {\"topic\":\"lowerbound\",\n    \"payload\": p[\"lowerBound\"] \n}\n\n\nreturn json\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 170,
        "y": 600,
        "wires": [
            [
                "0ea4accf39062632"
            ]
        ]
    },
    {
        "id": "29e0287693227af0",
        "type": "function",
        "z": "26da8ec8a60a9d75",
        "name": "higherboundgetter",
        "func": "\nvar p = JSON.parse(msg.payload)\n\n\n\n\nvar json = {\"topic\":\"upperbound\",\n    \"payload\": p[\"upperBound\"] \n}\n\n\nreturn json\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 150,
        "y": 720,
        "wires": [
            [
                "fb15a0964089df98"
            ]
        ]
    },
    {
        "id": "fb15a0964089df98",
        "type": "ui_slider",
        "z": "26da8ec8a60a9d75",
        "d": true,
        "name": "setlupperHumidityBound",
        "label": "Upper humid bound",
        "tooltip": "",
        "group": "49b8362b1f102d88",
        "order": 24,
        "width": "8",
        "height": "2",
        "passthru": false,
        "outs": "end",
        "topic": "topic",
        "topicType": "msg",
        "min": "40",
        "max": "80",
        "step": "0.1",
        "className": "",
        "x": 170,
        "y": 760,
        "wires": [
            [
                "f259309163901899"
            ]
        ]
    },
    {
        "id": "f259309163901899",
        "type": "mqtt out",
        "z": "26da8ec8a60a9d75",
        "name": "send highbound",
        "topic": "box/control/dehumidifier/upper",
        "qos": "",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "67b58dab33c9118c",
        "x": 140,
        "y": 800,
        "wires": []
    },
    {
        "id": "3fe3036e4da1774b",
        "type": "delay",
        "z": "26da8ec8a60a9d75",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "5",
        "rateUnits": "minute",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": false,
        "outputs": 1,
        "x": 260,
        "y": 380,
        "wires": [
            [
                "0c5d1ad61cebc300"
            ]
        ]
    },
    {
        "id": "04406821e76d86e2",
        "type": "ui_switch",
        "z": "26da8ec8a60a9d75",
        "d": true,
        "name": "",
        "label": "Heater state",
        "tooltip": "",
        "group": "49b8362b1f102d88",
        "order": 26,
        "width": "6",
        "height": "1",
        "passthru": false,
        "decouple": "true",
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "onvalue": "on",
        "onvalueType": "str",
        "onicon": "",
        "oncolor": "",
        "offvalue": "off",
        "offvalueType": "str",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 810,
        "y": 520,
        "wires": [
            [
                "1baefbd031bed57d"
            ]
        ]
    },
    {
        "id": "02b9363055f7cf39",
        "type": "function",
        "z": "26da8ec8a60a9d75",
        "d": true,
        "name": "heaterStateGetter",
        "func": "\nvar p = JSON.parse(msg.payload)\n\nvar value =\"\"\nif (p[\"heaterState\"] == 0) {\n    value  = \"off\"\n}\nif (p[\"heaterState\"] == 1) {\n    value  = \"on\"\n}\n\n\n\nvar json = {\"topic\":\"autoDehumidifier\",\n    \"payload\": value\n}\n\n\nreturn json\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 520,
        "wires": [
            [
                "04406821e76d86e2"
            ]
        ]
    },
    {
        "id": "1baefbd031bed57d",
        "type": "mqtt out",
        "z": "26da8ec8a60a9d75",
        "name": "",
        "topic": "box/control/heater",
        "qos": "",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "67b58dab33c9118c",
        "x": 1070,
        "y": 520,
        "wires": []
    },
    {
        "id": "fc92b3f74aed4f6a",
        "type": "function",
        "z": "26da8ec8a60a9d75",
        "name": "fan power getter",
        "func": "var p = JSON.parse(msg.payload)\n\nif(!p.hasOwnProperty(\"fan\")){return;}\n\nflow.set(\"fan\", p[\"fan\"])\n\nvar json = {\"topic\":\"fanPower\",\n    \"payload\": p[\"fan\"] \n}\n\n\nreturn json\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 700,
        "wires": [
            [
                "15b87b99c0fefd4a",
                "42f49d5e6049d286",
                "b7d529bf022fca42",
                "185aead36a310ed9"
            ]
        ]
    },
    {
        "id": "15b87b99c0fefd4a",
        "type": "ui_numeric",
        "z": "26da8ec8a60a9d75",
        "name": "Fan power text",
        "label": "fan power",
        "tooltip": "",
        "group": "49b8362b1f102d88",
        "order": 13,
        "width": "5",
        "height": "1",
        "wrap": true,
        "passthru": false,
        "topic": "topic",
        "topicType": "msg",
        "format": "{{value}}",
        "min": 0,
        "max": "100",
        "step": "0.1",
        "className": "",
        "x": 820,
        "y": 680,
        "wires": [
            [
                "5d73c6ba0deb6825"
            ]
        ]
    },
    {
        "id": "b7d529bf022fca42",
        "type": "ui_chart",
        "z": "26da8ec8a60a9d75",
        "name": "fanpowerchart",
        "group": "49b8362b1f102d88",
        "order": 16,
        "width": "10",
        "height": "3",
        "label": "fan power",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "100",
        "removeOlder": "12",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 820,
        "y": 800,
        "wires": [
            []
        ]
    },
    {
        "id": "bbf8894732effdbe",
        "type": "function",
        "z": "26da8ec8a60a9d75",
        "name": "VPD getter",
        "func": "var p = JSON.parse(msg.payload)\n\nvar h = p[\"RH\"] /100\nvar T = p[\"T\"] *1\n\n//node.warn([\"humdity=\",h]);\n//node.warn([\"temp=\",T]);\nif(!p.hasOwnProperty(\"RH\") || !p.hasOwnProperty(\"vpd\")){return;}\n\n// vpl = 0.61078 * Math.exp(17.27 * T / (T + 237.3))\n// vpa = 0.61078 * Math.exp(17.27 * T / (T + 237.3)) * h\n// vpd = vpl - vpa\nvpd = p[\"vpd\"]\n\nif(isNaN(vpd)){\n    node.warn(\"calculated VPD is not a NUMBER WTF!\")\n}\n//node.warn(vpd)\nflow.set(\"currentVPD\", vpd)\n\n\n\nvar json = {\"topic\":\"VPD\",\n    \"payload\": vpd\n}\n\n\nreturn json\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 860,
        "wires": [
            [
                "36097947e9959ab7"
            ]
        ]
    },
    {
        "id": "36097947e9959ab7",
        "type": "ui_chart",
        "z": "26da8ec8a60a9d75",
        "name": "VPDChart",
        "group": "49b8362b1f102d88",
        "order": 2,
        "width": "12",
        "height": "5",
        "label": "VPD",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "bezier",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "12",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#b4cdee",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 800,
        "y": 880,
        "wires": [
            []
        ]
    },
    {
        "id": "185e3b9fcda98629",
        "type": "function",
        "z": "26da8ec8a60a9d75",
        "name": "reset getter",
        "func": "var json;\n\nif(msg.payload == \"hi\"){\n    json = {\"topic\":\"resets\",\n    \"payload\": 1 }\n} else {\n    json = {\"topic\":\"resets\",\n    \"payload\": 0 }\n}\n\n\nreturn json\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 110,
        "y": 240,
        "wires": [
            [
                "7843d0e0f6b4f696"
            ]
        ]
    },
    {
        "id": "7843d0e0f6b4f696",
        "type": "ui_chart",
        "z": "26da8ec8a60a9d75",
        "name": "Reset charts",
        "group": "49b8362b1f102d88",
        "order": 28,
        "width": "17",
        "height": "5",
        "label": "Resets",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "1",
        "removeOlder": "24",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 110,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "2677472d112fdc1c",
        "type": "ui_numeric",
        "z": "26da8ec8a60a9d75",
        "name": "Target Vpd",
        "label": "Target VPD",
        "tooltip": "",
        "group": "49b8362b1f102d88",
        "order": 3,
        "width": "12",
        "height": "1",
        "wrap": true,
        "passthru": false,
        "topic": "topic",
        "topicType": "msg",
        "format": "{{value}}",
        "min": "0.5",
        "max": "1.6",
        "step": "0.1",
        "className": "",
        "x": 810,
        "y": 940,
        "wires": [
            [
                "d48c98512a9cbbf9"
            ]
        ]
    },
    {
        "id": "d48c98512a9cbbf9",
        "type": "mqtt out",
        "z": "26da8ec8a60a9d75",
        "name": "",
        "topic": "box/control/targetVpd",
        "qos": "",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "67b58dab33c9118c",
        "x": 1100,
        "y": 940,
        "wires": []
    },
    {
        "id": "976d97f1993b16a4",
        "type": "ui_switch",
        "z": "26da8ec8a60a9d75",
        "name": "auto vpd switch",
        "label": "auto Vpd Control",
        "tooltip": "",
        "group": "49b8362b1f102d88",
        "order": 25,
        "width": "6",
        "height": "1",
        "passthru": false,
        "decouple": "true",
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "onvalue": "on",
        "onvalueType": "str",
        "onicon": "",
        "oncolor": "",
        "offvalue": "off",
        "offvalueType": "str",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 840,
        "y": 400,
        "wires": [
            [
                "58a69d33dceb6b59"
            ]
        ]
    },
    {
        "id": "7d4499b1d1f43b66",
        "type": "function",
        "z": "26da8ec8a60a9d75",
        "name": "auto vpd dehumidifer control getter",
        "func": "\nvar p = JSON.parse(msg.payload)\n\nif(!p.hasOwnProperty(\"autoVpd\")){return;}\n\nvar value =\"\"\nif (p[\"autoVpd\"]) {\n    value  = \"on\"\n}\nelse{\n    value  = \"off\"\n}\n\n//node.warn(\"got autoVpd is \"+ value)\n\nvar json = {\"topic\":\"autoVpd\",\n    \"payload\": value\n}\n\n\nreturn json\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 400,
        "wires": [
            [
                "976d97f1993b16a4"
            ]
        ]
    },
    {
        "id": "58a69d33dceb6b59",
        "type": "mqtt out",
        "z": "26da8ec8a60a9d75",
        "name": "",
        "topic": "box/control/dehumidifier/autoVpd",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "67b58dab33c9118c",
        "x": 1120,
        "y": 400,
        "wires": []
    },
    {
        "id": "bd1455aba8d69b12",
        "type": "function",
        "z": "26da8ec8a60a9d75",
        "name": "reset catcher",
        "func": "if(msg.payload == \"hi\"){\n    return;\n} \nelse {\n    global.set(\"lastpayload\",Date.now());\n}\n\nvar p = JSON.parse(msg.payload)\nif(p.hasOwnProperty(\"P\")){\n    flow.set(\"P\", p[\"P\"])\n}\nif(p.hasOwnProperty(\"D\")){\n    flow.set(\"D\", p[\"D\"])\n}\nif(p.hasOwnProperty(\"I\")){\n    flow.set(\"I\", p[\"I\"])\n}\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 180,
        "wires": [
            [
                "10d1b97823cb29e9",
                "3fe3036e4da1774b",
                "86991f0964e90108",
                "c17e7f1d49086e7f",
                "d5c31c65e2b3e2fe",
                "fc34d514afc4651b",
                "7d4499b1d1f43b66",
                "2079b9a05a59e9c0",
                "02b9363055f7cf39",
                "29e0287693227af0",
                "7fbf4177de5abb5e",
                "fc92b3f74aed4f6a",
                "bbf8894732effdbe",
                "1eb8e6edb9e96d86",
                "79817aeb50add8ba",
                "1a0c59ad5581886e",
                "e70ff5ea8f38ded8"
            ]
        ]
    },
    {
        "id": "e7c49100f19e6aab",
        "type": "debug",
        "z": "26da8ec8a60a9d75",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 150,
        "y": 40,
        "wires": []
    },
    {
        "id": "1eb8e6edb9e96d86",
        "type": "function",
        "z": "26da8ec8a60a9d75",
        "name": "targetVPD getter",
        "func": "var p = JSON.parse(msg.payload)\n\n\nflow.set(\"targetVPD\", p[\"targetVpd\"])\nvar json = {\"topic\":\"targetVPD\",\n    \"payload\": p[\"targetVpd\"]\n}\n\n\nreturn json\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 940,
        "wires": [
            [
                "2677472d112fdc1c"
            ]
        ]
    },
    {
        "id": "626124e1112ff74b",
        "type": "inject",
        "z": "26da8ec8a60a9d75",
        "name": "missing controller checker",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 180,
        "y": 1120,
        "wires": [
            [
                "9ef143a7d6578b99"
            ]
        ]
    },
    {
        "id": "e03ff1ccdfb68112",
        "type": "function",
        "z": "26da8ec8a60a9d75",
        "name": "Timediff",
        "func": "var lastpayload = global.get(\"lastpayload\");\n\n\ndiff = Date.now() - lastpayload\nnode.warn(\"last communication from controller was @ \" + new Date(lastpayload) +\"\\n\"+ diff /1000 + \" seconds ago \")\n\nmaxTimeNoCommunicationMins = 20\n\nmsg.payload = {}\nmsg.payload.chatId = msg.TelegramClientID\nmsg.payload.type = \"message\"\nmsg.payload.content = \"hello from node-red!\"\n\n\nif( diff /1000 < maxTimeNoCommunicationMins* 60 ){\n    return 0;\n} else {\n    \n    msg.payload.content = \"No response from grow controller for \"+maxTimeNoCommunicationMins+\" mins\"\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 1120,
        "wires": [
            [
                "81fdec7aaed70467"
            ]
        ]
    },
    {
        "id": "315891178173b158",
        "type": "telegram sender",
        "z": "26da8ec8a60a9d75",
        "name": "",
        "bot": "353ee16983fbc803",
        "haserroroutput": false,
        "outputs": 1,
        "x": 1010,
        "y": 1120,
        "wires": [
            []
        ]
    },
    {
        "id": "81fdec7aaed70467",
        "type": "delay",
        "z": "26da8ec8a60a9d75",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "10",
        "rateUnits": "minute",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": false,
        "outputs": 1,
        "x": 800,
        "y": 1120,
        "wires": [
            [
                "315891178173b158"
            ]
        ]
    },
    {
        "id": "285f16c0844113c5",
        "type": "inject",
        "z": "26da8ec8a60a9d75",
        "name": "UI update",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "2",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 210,
        "y": 1200,
        "wires": [
            [
                "d59f386dcc9ec205",
                "fd7f7c52b6bfe01a",
                "4f93d7c66357590b"
            ]
        ]
    },
    {
        "id": "42b30b567493f954",
        "type": "ui_text",
        "z": "26da8ec8a60a9d75",
        "group": "49b8362b1f102d88",
        "order": 27,
        "width": "6",
        "height": "1",
        "name": "",
        "label": "Last communication:",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "x": 940,
        "y": 1260,
        "wires": []
    },
    {
        "id": "d59f386dcc9ec205",
        "type": "function",
        "z": "26da8ec8a60a9d75",
        "name": "secondsSinceLastPayload",
        "func": "var lastpayload = global.get(\"lastpayload\");\n\nvar longestdiff = global.get(\"longestDiff\");\n\nif(longestdiff == false){\n    longestdiff =0;\n}\n\ndiff = Date.now() - lastpayload\nmsg.payload = (diff/ 1000)\n\n\n\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\nglobal.set(\"lastDiff\", 0);",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 1200,
        "wires": [
            [
                "16412fbd0a8bd471",
                "795c92047ee9d54d"
            ]
        ]
    },
    {
        "id": "32f25dab62cbe53a",
        "type": "ui_chart",
        "z": "26da8ec8a60a9d75",
        "d": true,
        "name": "",
        "group": "49b8362b1f102d88",
        "order": 29,
        "width": "17",
        "height": "5",
        "label": "Ram chart",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "24",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 810,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "79817aeb50add8ba",
        "type": "function",
        "z": "26da8ec8a60a9d75",
        "d": true,
        "name": "ram Getter",
        "func": "\nvar p = JSON.parse(msg.payload)\n\n\nvar json = {\"topic\":\"ram\",\n    \"payload\": p[\"ram\"] \n}\n\n\nreturn json\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 340,
        "wires": [
            [
                "32f25dab62cbe53a"
            ]
        ]
    },
    {
        "id": "9ef143a7d6578b99",
        "type": "credentials",
        "z": "26da8ec8a60a9d75",
        "name": "TargettelegramchatID",
        "props": [
            {
                "value": "TelegramClientID",
                "type": "msg"
            }
        ],
        "x": 440,
        "y": 1120,
        "wires": [
            [
                "e03ff1ccdfb68112"
            ]
        ]
    },
    {
        "id": "3bec20de4cd4979c",
        "type": "ui_text",
        "z": "26da8ec8a60a9d75",
        "group": "49b8362b1f102d88",
        "order": 21,
        "width": "4",
        "height": "2",
        "name": "",
        "label": "effective dehumidifier power",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "className": "",
        "x": 860,
        "y": 260,
        "wires": []
    },
    {
        "id": "40648a1fea3d5d1a",
        "type": "ui_chart",
        "z": "26da8ec8a60a9d75",
        "name": "Effective Dehumidifier power chart",
        "group": "49b8362b1f102d88",
        "order": 22,
        "width": "10",
        "height": "5",
        "label": "Effective Dehumidifier power",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "Calculating..",
        "dot": false,
        "ymin": "0",
        "ymax": "100",
        "removeOlder": "12",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 880,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "c05c7605c06ba5ec",
        "type": "ui_text",
        "z": "26da8ec8a60a9d75",
        "d": true,
        "group": "49b8362b1f102d88",
        "order": 12,
        "width": "10",
        "height": "1",
        "name": "",
        "label": "Long VPD state",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "x": 180,
        "y": 1300,
        "wires": []
    },
    {
        "id": "3289ad58b9c49ef5",
        "type": "inject",
        "z": "26da8ec8a60a9d75",
        "name": "Every 30 seconds",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "30",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 1480,
        "wires": [
            [
                "d3e8ac510b879f93",
                "24c82386a0c42a3d",
                "71c8159642985349"
            ]
        ]
    },
    {
        "id": "fd7f7c52b6bfe01a",
        "type": "function",
        "z": "26da8ec8a60a9d75",
        "d": true,
        "name": "VPD ratio output",
        "func": "var state = \"balanced\"\nvar vpdPastVals = flow.get(\"VPDPastVals\")\nvar targetVpd = flow.get(\"targetVPD\");\n\n\nif(vpdPastVals){\n    vpdPastVals = vpdPastVals.filter(x => !isNaN(x)) \n\n    var highCount = vpdPastVals.filter( x => x > targetVpd).length;\n    var lowCount = vpdPastVals.filter( x => x < targetVpd).length;\n    var balanceDiff = lowCount - highCount\n    \n    var skewPercent = Math.abs(balanceDiff) / 50; // buffer size\n    \n    if(skewPercent > 0.8 ){\n        if(balanceDiff < 0 ){\n            state = \"Too dry/cold\"\n        }\n        else{\n            state = \"Too wet/warm\"\n        }\n    }\n    \n    \n    \n    return {\"topic\": \"vpd state\",\n    \"payload\": `${state} ratio ${lowCount} : ${highCount} skew ${skewPercent * 100}%`\n    }\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 180,
        "y": 1260,
        "wires": [
            [
                "c05c7605c06ba5ec"
            ]
        ]
    },
    {
        "id": "8a4e48d667e20428",
        "type": "ui_chart",
        "z": "26da8ec8a60a9d75",
        "d": true,
        "name": "Last communication chart",
        "group": "49b8362b1f102d88",
        "order": 30,
        "width": 0,
        "height": 0,
        "label": "Last communication",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "12",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 970,
        "y": 1200,
        "wires": [
            []
        ]
    },
    {
        "id": "16412fbd0a8bd471",
        "type": "function",
        "z": "26da8ec8a60a9d75",
        "name": "Add suffix",
        "func": "msg.payload += \" seconds ago\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 1260,
        "wires": [
            [
                "42b30b567493f954"
            ]
        ]
    },
    {
        "id": "795c92047ee9d54d",
        "type": "delay",
        "z": "26da8ec8a60a9d75",
        "d": true,
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "10",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": false,
        "outputs": 1,
        "x": 760,
        "y": 1200,
        "wires": [
            [
                "8a4e48d667e20428"
            ]
        ]
    },
    {
        "id": "4f93d7c66357590b",
        "type": "function",
        "z": "26da8ec8a60a9d75",
        "name": "dehumid power fan error",
        "func": "\nvar dehumidPowerPastVals = flow.get(\"dehumidPowerPastVals\")\nvar target = 50;\nconst average = list => list.reduce((prev, curr) => parseFloat(prev) + parseFloat(curr)) / list.length;\n\nvar currentEffectivePower = flow.get(\"effectiveDehumidPower\")\n\n\nif(dehumidPowerPastVals){\n    \n    const avg = average(dehumidPowerPastVals);\n    \n    //testing currentval\n    const error = currentEffectivePower - target\n    flow.set(\"fanError\", error)\n    \n    \n    return {\"topic\": \"vpd state\",\n    \"payload\": `fan error ${error}`\n    }\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 1320,
        "wires": [
            [
                "69515540f43c0eab"
            ]
        ]
    },
    {
        "id": "69515540f43c0eab",
        "type": "ui_text",
        "z": "26da8ec8a60a9d75",
        "d": true,
        "group": "49b8362b1f102d88",
        "order": 15,
        "width": "10",
        "height": "1",
        "name": "",
        "label": "dehumidpower error:",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "x": 740,
        "y": 1320,
        "wires": []
    },
    {
        "id": "931c1693c143c6b2",
        "type": "ui_text",
        "z": "26da8ec8a60a9d75",
        "group": "49b8362b1f102d88",
        "order": 6,
        "width": "10",
        "height": "1",
        "name": "",
        "label": "humidity",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "x": 800,
        "y": 140,
        "wires": []
    },
    {
        "id": "1a0c59ad5581886e",
        "type": "function",
        "z": "26da8ec8a60a9d75",
        "name": "targetHumidity getter",
        "func": "var p = JSON.parse(msg.payload)\n\n\nflow.set(\"targetHu\", p[\"targetHu\"])\nvar json = {\"topic\":\"targetVPD\",\n    \"payload\": p[\"targetHu\"]\n}\n\n\nreturn json\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 580,
        "wires": [
            [
                "6990cc63772fdebf"
            ]
        ]
    },
    {
        "id": "6990cc63772fdebf",
        "type": "ui_text",
        "z": "26da8ec8a60a9d75",
        "group": "49b8362b1f102d88",
        "order": 7,
        "width": "10",
        "height": "1",
        "name": "",
        "label": "target humidity",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "x": 820,
        "y": 580,
        "wires": []
    },
    {
        "id": "6d8570abe15db599",
        "type": "ui_numeric",
        "z": "26da8ec8a60a9d75",
        "name": "",
        "label": "P",
        "tooltip": "",
        "group": "49b8362b1f102d88",
        "order": 8,
        "width": "10",
        "height": "1",
        "wrap": false,
        "passthru": true,
        "topic": "topic",
        "topicType": "msg",
        "format": "{{value}}",
        "min": "-10",
        "max": 10,
        "step": "0.1",
        "className": "",
        "x": 445.9999885559082,
        "y": 1435.9999618530273,
        "wires": [
            [
                "c37d55b54e1b090f"
            ]
        ]
    },
    {
        "id": "d3e8ac510b879f93",
        "type": "function",
        "z": "26da8ec8a60a9d75",
        "name": "P",
        "func": "\n\nreturn {\"topic\": \"P\", \"payload\": flow.get(\"P\")}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 325.9999885559082,
        "y": 1435.9999618530273,
        "wires": [
            [
                "6d8570abe15db599"
            ]
        ]
    },
    {
        "id": "c37d55b54e1b090f",
        "type": "mqtt out",
        "z": "26da8ec8a60a9d75",
        "name": "P control",
        "topic": "box/control/P",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "67b58dab33c9118c",
        "x": 600,
        "y": 1420,
        "wires": []
    },
    {
        "id": "24c82386a0c42a3d",
        "type": "function",
        "z": "26da8ec8a60a9d75",
        "name": "D",
        "func": "\nreturn {\"topic\": \"D\", \"payload\": flow.get(\"D\")}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 1520,
        "wires": [
            [
                "57123e78c8d1ea77"
            ]
        ]
    },
    {
        "id": "57123e78c8d1ea77",
        "type": "ui_numeric",
        "z": "26da8ec8a60a9d75",
        "name": "",
        "label": "D",
        "tooltip": "",
        "group": "49b8362b1f102d88",
        "order": 10,
        "width": "10",
        "height": "1",
        "wrap": false,
        "passthru": true,
        "topic": "topic",
        "topicType": "msg",
        "format": "{{value}}",
        "min": "0",
        "max": "100",
        "step": "1",
        "className": "",
        "x": 450,
        "y": 1520,
        "wires": [
            [
                "d39bdcd09019dd28"
            ]
        ]
    },
    {
        "id": "d39bdcd09019dd28",
        "type": "mqtt out",
        "z": "26da8ec8a60a9d75",
        "name": "D control",
        "topic": "box/control/D",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "67b58dab33c9118c",
        "x": 600,
        "y": 1540,
        "wires": []
    },
    {
        "id": "71c8159642985349",
        "type": "function",
        "z": "26da8ec8a60a9d75",
        "name": "I",
        "func": "\nreturn {\"topic\": \"I\", \"payload\": flow.get(\"I\")}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 1480,
        "wires": [
            [
                "8a29e20563e40659"
            ]
        ]
    },
    {
        "id": "8a29e20563e40659",
        "type": "ui_numeric",
        "z": "26da8ec8a60a9d75",
        "name": "",
        "label": "I",
        "tooltip": "",
        "group": "49b8362b1f102d88",
        "order": 9,
        "width": "10",
        "height": "1",
        "wrap": false,
        "passthru": true,
        "topic": "topic",
        "topicType": "msg",
        "format": "{{value}}",
        "min": "-10",
        "max": 10,
        "step": "0.1",
        "className": "",
        "x": 450,
        "y": 1480,
        "wires": [
            [
                "dfbce4f0c5e7b5ff"
            ]
        ]
    },
    {
        "id": "dfbce4f0c5e7b5ff",
        "type": "mqtt out",
        "z": "26da8ec8a60a9d75",
        "name": "I control",
        "topic": "box/control/I",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "67b58dab33c9118c",
        "x": 600,
        "y": 1480,
        "wires": []
    },
    {
        "id": "e70ff5ea8f38ded8",
        "type": "function",
        "z": "26da8ec8a60a9d75",
        "name": "humidity error",
        "func": "var p = JSON.parse(msg.payload)\n\nif(!p.hasOwnProperty(\"RH\") || !p.hasOwnProperty(\"targetHu\")){return;}\nvar error = p[\"RH\"] - p[\"targetHu\"]\n\nreturn {\"topic\":\"error\",\n    \"payload\":error\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 1000,
        "wires": [
            [
                "8840b1c4650c95d5"
            ]
        ]
    },
    {
        "id": "8840b1c4650c95d5",
        "type": "ui_chart",
        "z": "26da8ec8a60a9d75",
        "name": "",
        "group": "49b8362b1f102d88",
        "order": 30,
        "width": "17",
        "height": "5",
        "label": "humidity error",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "bezier",
        "nodata": "",
        "dot": false,
        "ymin": "-5",
        "ymax": "5",
        "removeOlder": "30",
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#db4848",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 820,
        "y": 1000,
        "wires": [
            []
        ]
    },
    {
        "id": "185aead36a310ed9",
        "type": "ui_chart",
        "z": "26da8ec8a60a9d75",
        "name": "",
        "group": "49b8362b1f102d88",
        "order": 31,
        "width": "17",
        "height": "5",
        "label": "short term fan power",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "30",
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 840,
        "y": 840,
        "wires": [
            []
        ]
    },
    {
        "id": "3921fb464c0ad399",
        "type": "ui_spacer",
        "z": "26da8ec8a60a9d75",
        "name": "spacer",
        "group": "49b8362b1f102d88",
        "order": 11,
        "width": "12",
        "height": "4"
    },
    {
        "id": "67b58dab33c9118c",
        "type": "mqtt-broker",
        "name": "MQHIVE",
        "broker": "fa0e1a004876435d9dd9ccca0e0d3a83.s1.eu.hivemq.cloud",
        "port": "8883",
        "tls": "",
        "clientid": "fan",
        "autoConnect": true,
        "usetls": true,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "49b8362b1f102d88",
        "type": "ui_group",
        "name": "Environment",
        "tab": "b784527878a002f6",
        "order": 1,
        "disp": true,
        "width": "23",
        "collapse": false,
        "className": ""
    },
    {
        "id": "353ee16983fbc803",
        "type": "telegram bot",
        "botname": "EnvironControllerAlert_bot",
        "usernames": "",
        "chatids": "",
        "baseapiurl": "",
        "updatemode": "polling",
        "pollinterval": "300",
        "usesocks": false,
        "sockshost": "",
        "socksport": "6667",
        "socksusername": "anonymous",
        "sockspassword": "",
        "bothost": "",
        "botpath": "",
        "localbotport": "8443",
        "publicbotport": "8443",
        "privatekey": "",
        "certificate": "",
        "useselfsignedcertificate": false,
        "sslterminated": false,
        "verboselogging": false
    },
    {
        "id": "b784527878a002f6",
        "type": "ui_tab",
        "name": "environ",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    }
]