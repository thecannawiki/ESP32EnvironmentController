[
    {
        "id": "26da8ec8a60a9d75",
        "type": "tab",
        "label": "Desktop",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "dda04585d20830a9",
        "type": "mqtt in",
        "z": "26da8ec8a60a9d75",
        "name": "EnvironIngest",
        "topic": "box/environ",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "67b58dab33c9118c",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 110,
        "y": 460,
        "wires": [
            [
                "185e3b9fcda98629",
                "bd1455aba8d69b12",
                "52355499062cd4e4"
            ]
        ]
    },
    {
        "id": "86991f0964e90108",
        "type": "function",
        "z": "26da8ec8a60a9d75",
        "name": "tempGetter",
        "func": "var p = msg.payload\nif(!p.hasOwnProperty(\"T\")){return;}\nvar temp = p[\"T\"]\n\n\nvar json = {\"topic\":\"temp\",\n    \"payload\":temp\n}\n\nreturn json\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 40,
        "wires": [
            [
                "0bf95bdd9e1d4b10",
                "0dbbfb1837ed0a84"
            ]
        ]
    },
    {
        "id": "c17e7f1d49086e7f",
        "type": "function",
        "z": "26da8ec8a60a9d75",
        "name": "co2getter",
        "func": "\nvar p = msg.payload\n\nflow.set(\"co2\", p[\"co2\"]);\n\nvar json = {\"topic\":\"co2\",\n    \"payload\":p[\"co2\"]\n}\n\nreturn json\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 140,
        "wires": [
            [
                "5b707a8c12cc868f",
                "dafe22383c9d69e8"
            ]
        ]
    },
    {
        "id": "d5c31c65e2b3e2fe",
        "type": "function",
        "z": "26da8ec8a60a9d75",
        "name": "humidityGetter",
        "func": "\nvar p = msg.payload\n\nvar json = {\"topic\":\"humidity\",\n    \"payload\":p[\"RH\"]\n}\n\n\n\nif(p[\"RH\"] != -1){\n    flow.set(\"last_sensor_value\", new Date())\n}\n\n\n\nreturn json\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 180,
        "wires": [
            [
                "93fe1f0bd4359cb9",
                "931c1693c143c6b2"
            ]
        ]
    },
    {
        "id": "5d73c6ba0deb6825",
        "type": "mqtt out",
        "z": "26da8ec8a60a9d75",
        "name": "exhaust power control",
        "topic": "box/control/exhaust",
        "qos": "",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "67b58dab33c9118c",
        "x": 1220,
        "y": 780,
        "wires": []
    },
    {
        "id": "fc34d514afc4651b",
        "type": "function",
        "z": "26da8ec8a60a9d75",
        "name": "dehumidifierStateGetter",
        "func": "const itemCounter = (array, item) => {\n    return array.filter((currentItem) => currentItem == item).length;\n};\n\n\nvar p = msg.payload\n//console.log(p)\nvar dehumidifierState =\"\"\nif(!p.hasOwnProperty(\"DHU\")){return;}\n\n    \nif (p[\"DHU\"]) {\n    dehumidifierState  = 1\n}\nelse{\n    dehumidifierState  = 0\n}\n\nflow.set(\"dehumidState\", dehumidifierState);\n\nvar dehumidifierPastVals = flow.get(\"dehumidStates\");\nif(dehumidifierPastVals == null){\n    dehumidifierPastVals = []\n}\nif(dehumidifierPastVals.length > 50){\n    dehumidifierPastVals.shift();\n}\ndehumidifierPastVals.push(dehumidifierState);\nflow.set(\"dehumidStates\", dehumidifierPastVals);\n//node.warn(global.get(\"dehumidStates\"));\n\n\n\nvar ons = itemCounter(dehumidifierPastVals, 1);\nvar effectivePower = parseFloat((ons/dehumidifierPastVals.length) * 100).toFixed(2)\nconst effectivePowerString = String(effectivePower) + \"%\"\n//node.warn(effectivePower);\n//node.warn(effectivePowerString);\nflow.set(\"effectiveDehumidPower\", effectivePower)\n\n\nvar dehumidPowerPastVals = flow.get(\"dehumidPowerPastVals\")\nif(dehumidPowerPastVals == null){\n    dehumidPowerPastVals = []\n}\ndehumidPowerPastVals.push(parseFloat(effectivePower))\nif(dehumidPowerPastVals.length > 20){\n    dehumidPowerPastVals.shift();\n}\nflow.set(\"dehumidPowerPastVals\", dehumidPowerPastVals)\n\n\nvar statePayload = {\"topic\":\"dehumidifierState\",\n    \"payload\": dehumidifierState\n}\nvar effectivePowerStringPayload = {\"topic\":\"effectivePower\",\n    \"payload\": effectivePowerString\n}\n\nvar effectivePowerNumPayload = {\"topic\":\"effectivePower\",\n    \"payload\": effectivePower\n}\n\n\nreturn [statePayload, effectivePowerStringPayload, effectivePowerNumPayload];\n",
        "outputs": 3,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 320,
        "wires": [
            [
                "2e3e5e2ac8bb5f39",
                "e31045171627fcdf"
            ],
            [
                "3bec20de4cd4979c"
            ],
            [
                "e1afc3c561caf24c"
            ]
        ]
    },
    {
        "id": "40aff9772cd6b366",
        "type": "mqtt out",
        "z": "26da8ec8a60a9d75",
        "name": "",
        "topic": "box/control/dehumidifier/auto",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "67b58dab33c9118c",
        "x": 1240,
        "y": 540,
        "wires": []
    },
    {
        "id": "e35dfd104af04611",
        "type": "mqtt out",
        "z": "26da8ec8a60a9d75",
        "name": "",
        "topic": "box/control/dehumidifier/toggle",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "67b58dab33c9118c",
        "x": 1290,
        "y": 300,
        "wires": []
    },
    {
        "id": "2079b9a05a59e9c0",
        "type": "function",
        "z": "26da8ec8a60a9d75",
        "name": "automatic dehumidifer control getter",
        "func": "\nvar p = msg.payload\nif(!p.hasOwnProperty(\"ADHU\")){return;}\n\nvar value =\"\"\nif (p[\"ADHU\"]) {\n    value  = \"on\"\n}\nelse {\n    value  = \"off\"\n}\n\n\n\nvar json = {\"topic\":\"autoDehumid\",\n    \"payload\": value\n}\n\n\nreturn json\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 540,
        "wires": [
            [
                "5bf7860e0bc7ac99"
            ]
        ]
    },
    {
        "id": "0c5d1ad61cebc300",
        "type": "function",
        "z": "26da8ec8a60a9d75",
        "name": "environ trimmer",
        "func": "var p = msg.payload\n\nvar time = new Date();\n\nvar json = {\"time\":time.getTime(),\n    \"temp\":p[\"T\"], \"humidity\":p[\"RH\"], \"co2\":p[\"co2\"], \"vpd\":p[\"vpd\"]\n}\n\nmsg.payload = json;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 740,
        "wires": [
            [
                "ab473525134d175f"
            ]
        ]
    },
    {
        "id": "3fe3036e4da1774b",
        "type": "delay",
        "z": "26da8ec8a60a9d75",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "5",
        "rateUnits": "minute",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": false,
        "outputs": 1,
        "x": 260,
        "y": 700,
        "wires": [
            [
                "0c5d1ad61cebc300"
            ]
        ]
    },
    {
        "id": "02b9363055f7cf39",
        "type": "function",
        "z": "26da8ec8a60a9d75",
        "name": "heaterStateGetter",
        "func": "\nvar p = msg.payload\n\nvar value =\"\"\nif (p[\"H\"] == 0) {\n    value  = \"off\"\n}\nif (p[\"H\"] == 1) {\n    value  = \"on\"\n}\n\n\n\nvar json = {\n    \"topic\":\"heater\",\n    \"payload\": value\n}\n\n\nreturn json\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 460,
        "wires": [
            [
                "04406821e76d86e2"
            ]
        ]
    },
    {
        "id": "1baefbd031bed57d",
        "type": "mqtt out",
        "z": "26da8ec8a60a9d75",
        "name": "",
        "topic": "box/control/heater",
        "qos": "",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "67b58dab33c9118c",
        "x": 1230,
        "y": 420,
        "wires": []
    },
    {
        "id": "fc92b3f74aed4f6a",
        "type": "function",
        "z": "26da8ec8a60a9d75",
        "name": "fan power getter",
        "func": "var p = msg.payload\n\nif(!p.hasOwnProperty(\"fan\")){return;}\n\nvar fan = p[\"fan\"]\nflow.set(\"fan\", fan)\n\nvar pastvals = flow.get(\"fanPastVals\");\nif(pastvals == null){\n    pastvals = []\n}\n\nwhile(pastvals.length > 120){  // 120 * 10secs per event = 1200s = 20 mins\n    pastvals.shift();\n}\npastvals.push(fan);\nflow.set(\"fanPastVals\", pastvals);\n\n\n\nreturn {\"topic\":\"fanPower\",\n    \"payload\": fan }\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 780,
        "wires": [
            [
                "15b87b99c0fefd4a",
                "42f49d5e6049d286",
                "b7d529bf022fca42",
                "185aead36a310ed9"
            ]
        ]
    },
    {
        "id": "bbf8894732effdbe",
        "type": "function",
        "z": "26da8ec8a60a9d75",
        "name": "VPD getter",
        "func": "var p = msg.payload\nif(!p.hasOwnProperty(\"RH\") || !p.hasOwnProperty(\"vpd\")){return;}\n\n// vpl = 0.61078 * Math.exp(17.27 * T / (T + 237.3))\n// vpa = 0.61078 * Math.exp(17.27 * T / (T + 237.3)) * h\n// vpd = vpl - vpa\nvar vpd = p[\"vpd\"]\n\nif(isNaN(vpd)){\n    node.warn(\"calculated VPD is not a NUMBER WTF!\")\n}\n\nflow.set(\"currentVPD\", vpd)\n\n\n\nvar json = {\"topic\":\"VPD\",\n    \"payload\": vpd\n}\n\n\nreturn json\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 900,
        "wires": [
            [
                "36097947e9959ab7"
            ]
        ]
    },
    {
        "id": "185e3b9fcda98629",
        "type": "function",
        "z": "26da8ec8a60a9d75",
        "name": "reset getter",
        "func": "var json;\n\nif(msg.payload == \"hi\"){\n    json = {\"topic\":\"resets\",\n    \"payload\": 1 }\n} else {\n    json = {\"topic\":\"resets\",\n    \"payload\": 0 }\n}\n\n\nreturn json\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 110,
        "y": 520,
        "wires": [
            [
                "7843d0e0f6b4f696"
            ]
        ]
    },
    {
        "id": "d48c98512a9cbbf9",
        "type": "mqtt out",
        "z": "26da8ec8a60a9d75",
        "name": "",
        "topic": "box/control/targetVpd",
        "qos": "",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "67b58dab33c9118c",
        "x": 1300,
        "y": 1020,
        "wires": []
    },
    {
        "id": "7d4499b1d1f43b66",
        "type": "function",
        "z": "26da8ec8a60a9d75",
        "name": "auto vpd fan control getter",
        "func": "\nvar p = msg.payload\n\nif(!p.hasOwnProperty(\"autoFanVpd\")){return;}\n\nvar value =\"\"\nif (p[\"autoFanVpd\"]) {\n    value  = \"on\"\n}\nelse{\n    value  = \"off\"\n}\n\n//node.warn(\"got autoVpd is \"+ value)\n\nvar json = {\"topic\":\"autoFanVpd\",\n    \"payload\": value\n}\n\n\nreturn json\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 500,
        "wires": [
            [
                "976d97f1993b16a4"
            ]
        ]
    },
    {
        "id": "58a69d33dceb6b59",
        "type": "mqtt out",
        "z": "26da8ec8a60a9d75",
        "name": "",
        "topic": "box/control/exhaust/autoVpd",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "67b58dab33c9118c",
        "x": 1240,
        "y": 480,
        "wires": []
    },
    {
        "id": "bd1455aba8d69b12",
        "type": "function",
        "z": "26da8ec8a60a9d75",
        "name": "reset catcher",
        "func": "if(msg.payload == \"hi\"){\n    return; //the controller says \"hi\" in its first message after restarted. Restart just happened\n} \nelse {\n    flow.set(\"lastpayload\", Date.now());\n}\n\n//SOME cleaning of data here too\n\nvar p = msg.payload\nif(p.hasOwnProperty(\"P\")){\n    flow.set(\"P\", p[\"P\"])\n}\n\nif(p.hasOwnProperty(\"D\")){\n    flow.set(\"D\", p[\"D\"])\n}\nif(p.hasOwnProperty(\"I\")){\n    flow.set(\"I\", p[\"I\"])\n}\nif(p.hasOwnProperty(\"vpd\")){\n    msg.payload[\"vpd\"] = parseFloat(p[\"vpd\"])\n}\n\nif(p.hasOwnProperty(\"fan\")){\n    msg.payload[\"fan\"] = parseFloat(p[\"fan\"])\n}\n\nif(p.hasOwnProperty(\"RH\")){\n    flow.set(\"RH\", p[\"RH\"])\n}\n\nif(p.hasOwnProperty(\"testRH1\")){\n    flow.set(\"testRH1\", p[\"testRH1\"])\n    flow.set(\"lastTest\", Date.now())\n}\n\nif(p.hasOwnProperty(\"water1\")){\n    flow.set(\"water1\", p[\"water1\"])\n}\n\nif(p.hasOwnProperty(\"water2\")){\n    flow.set(\"water2\", p[\"water2\"])\n}\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 480,
        "wires": [
            [
                "3fe3036e4da1774b",
                "86991f0964e90108",
                "c17e7f1d49086e7f",
                "d5c31c65e2b3e2fe",
                "fc34d514afc4651b",
                "7d4499b1d1f43b66",
                "2079b9a05a59e9c0",
                "02b9363055f7cf39",
                "fc92b3f74aed4f6a",
                "bbf8894732effdbe",
                "1eb8e6edb9e96d86",
                "79817aeb50add8ba",
                "1a0c59ad5581886e",
                "e70ff5ea8f38ded8",
                "a39a3c6091d05a08",
                "269cf07aa1d284aa",
                "fd57eff4cdbab028",
                "728112bf974b7d6b",
                "1ae9a00d73d46cd9",
                "e7c49100f19e6aab",
                "1d8087e8ae190b2d",
                "c313aa35350879c0",
                "1fef863b71482bbe",
                "16a0427bb4f56759",
                "1c69b7402edbe972",
                "b2ddbdb168e92d7c",
                "82ce752ad34a4d0b",
                "dbd625a1f01c401f",
                "428cd9c732977328",
                "e3877934ff96e0c7"
            ]
        ]
    },
    {
        "id": "e7c49100f19e6aab",
        "type": "debug",
        "z": "26da8ec8a60a9d75",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 350,
        "y": 220,
        "wires": []
    },
    {
        "id": "1eb8e6edb9e96d86",
        "type": "function",
        "z": "26da8ec8a60a9d75",
        "name": "targetVPD getter",
        "func": "var p = msg.payload\nvar target_vpd = p[\"TVpd\"]\n\nflow.set(\"targetVPD\", target_vpd)\nvar json = {\"topic\":\"Controller_Target\",\n    \"payload\": target_vpd\n}\n\n\nreturn json\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 860,
        "wires": [
            [
                "36097947e9959ab7"
            ]
        ]
    },
    {
        "id": "626124e1112ff74b",
        "type": "inject",
        "z": "26da8ec8a60a9d75",
        "name": "missing controller checker",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 200,
        "y": 2180,
        "wires": [
            [
                "9ef143a7d6578b99"
            ]
        ]
    },
    {
        "id": "e03ff1ccdfb68112",
        "type": "function",
        "z": "26da8ec8a60a9d75",
        "name": "Missing controller timediff",
        "func": "var lastpayload = flow.get(\"lastpayload\");\n\n\nconst diff = Date.now() - lastpayload\n//node.warn(\"last communication from controller was @ \" + new Date(lastpayload) +\"\\n\"+ diff /1000 + \" seconds ago \")\n\nvar maxTimeNoCommunicationMins = 20\n\n\n\n\n\nif( diff /1000 < maxTimeNoCommunicationMins* 60 ){\n    return 0;\n} else {\n\n    var name = flow.get(\"name\")\n    msg.payload = {}\n    msg.payload.chatId = msg.TelegramClientID\n    msg.payload.type = \"message\"\n    msg.payload.content = `No response from ${name} controller for `+ (diff/1000)/60+\" mins\"\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 2140,
        "wires": [
            [
                "54d762cf0c16f8c5"
            ]
        ]
    },
    {
        "id": "285f16c0844113c5",
        "type": "inject",
        "z": "26da8ec8a60a9d75",
        "name": "UI update",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "2",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 190,
        "y": 2380,
        "wires": [
            [
                "d59f386dcc9ec205",
                "bfe4ae43fad398e9",
                "7fc823bd9e17d06a",
                "851b2ee65d2e0b8c",
                "519f1c0d76dcb70d",
                "f143e4fe2e9e11f3",
                "6c4b94eb66b77b4a"
            ]
        ]
    },
    {
        "id": "d59f386dcc9ec205",
        "type": "function",
        "z": "26da8ec8a60a9d75",
        "name": "secondsSinceLastPayload",
        "func": "var lastpayload = flow.get(\"lastpayload\");\n\nvar longestdiff = flow.get(\"longestDiff\");\n\nif(longestdiff == false){\n    longestdiff =0;\n}\n\ndiff = Date.now() - lastpayload\nmsg.payload = (diff/ 1000)\n\n\n\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\nglobal.set(\"lastDiff\", 0);",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 2320,
        "wires": [
            [
                "16412fbd0a8bd471"
            ]
        ]
    },
    {
        "id": "79817aeb50add8ba",
        "type": "function",
        "z": "26da8ec8a60a9d75",
        "name": "ram Getter",
        "func": "\nvar p = msg.payload\n\n\nvar json = {\"topic\":\"ram\",\n    \"payload\": p[\"ram\"] \n}\n\n\nreturn json\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "16412fbd0a8bd471",
        "type": "function",
        "z": "26da8ec8a60a9d75",
        "name": "Add suffix",
        "func": "msg.payload += \" seconds ago\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 2320,
        "wires": [
            [
                "42b30b567493f954"
            ]
        ]
    },
    {
        "id": "1a0c59ad5581886e",
        "type": "function",
        "z": "26da8ec8a60a9d75",
        "name": "targetHumidity getter",
        "func": "var p = msg.payload\n\nflow.set(\"targetHu\", p[\"TRH\"])\nreturn {\"topic\":\"targetHu\", \"payload\": p[\"TRH\"]}\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 220,
        "wires": [
            [
                "6990cc63772fdebf",
                "93fe1f0bd4359cb9"
            ]
        ]
    },
    {
        "id": "d3e8ac510b879f93",
        "type": "function",
        "z": "26da8ec8a60a9d75",
        "name": "P",
        "func": "var fieldName = \"P\"\nvar p = msg.payload\nif(!p.hasOwnProperty(fieldName)){return;}\nreturn { \"payload\": parseFloat(p[fieldName])}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 1280,
        "wires": [
            [
                "07b28a2d84609eaf"
            ]
        ]
    },
    {
        "id": "c37d55b54e1b090f",
        "type": "mqtt out",
        "z": "26da8ec8a60a9d75",
        "name": "P control",
        "topic": "box/control/P",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "67b58dab33c9118c",
        "x": 1040,
        "y": 1260,
        "wires": []
    },
    {
        "id": "24c82386a0c42a3d",
        "type": "function",
        "z": "26da8ec8a60a9d75",
        "name": "D",
        "func": "var fieldName = \"D\"\nvar p = msg.payload\nif(!p.hasOwnProperty(fieldName)){return;}\nreturn { \"payload\": parseFloat(p[fieldName])}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 1360,
        "wires": [
            [
                "f95562a917df3392"
            ]
        ]
    },
    {
        "id": "d39bdcd09019dd28",
        "type": "mqtt out",
        "z": "26da8ec8a60a9d75",
        "name": "D control",
        "topic": "box/control/D",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "67b58dab33c9118c",
        "x": 1040,
        "y": 1380,
        "wires": []
    },
    {
        "id": "71c8159642985349",
        "type": "function",
        "z": "26da8ec8a60a9d75",
        "name": "I",
        "func": "var fieldName = \"I\"\nvar p = msg.payload\nif(!p.hasOwnProperty(fieldName)){return;}\nreturn { \"payload\": parseFloat(p[fieldName])}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 1320,
        "wires": [
            [
                "e6116ea094cf1925"
            ]
        ]
    },
    {
        "id": "dfbce4f0c5e7b5ff",
        "type": "mqtt out",
        "z": "26da8ec8a60a9d75",
        "name": "I control",
        "topic": "box/control/I",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "67b58dab33c9118c",
        "x": 1040,
        "y": 1320,
        "wires": []
    },
    {
        "id": "e70ff5ea8f38ded8",
        "type": "function",
        "z": "26da8ec8a60a9d75",
        "name": "humidity error",
        "func": "var p = msg.payload\n\nif(!p.hasOwnProperty(\"RH\") || !p.hasOwnProperty(\"TRH\")){return;}\nvar error = p[\"RH\"] - p[\"TRH\"]\n\nreturn {\"topic\":\"error\",\n    \"payload\":error\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 1140,
        "wires": [
            [
                "8840b1c4650c95d5",
                "cd7211145afe9370"
            ]
        ]
    },
    {
        "id": "a39a3c6091d05a08",
        "type": "function",
        "z": "26da8ec8a60a9d75",
        "name": "power Array builder",
        "func": "\nconst itemCounter = (array, item) => {\n    return array.filter((currentItem) => currentItem == item).length;\n};\n\n// calc dehumidifier power usage\n\nvar dehumidifierPastVals = flow.get(\"dehumidStates\");\nif(dehumidifierPastVals == null){\n    return;\n}\nvar ons = itemCounter(dehumidifierPastVals, 1);\nvar dehumidPower = parseFloat((ons/dehumidifierPastVals.length) * 100).toFixed(2)\nvar fanPower = parseFloat(flow.get(\"fan\"));\n\n\n//total percentage of power currently in use\n// @ts-ignore\nconst totalPwr = dehumidPower*1 + fanPower*1;\n\n//build total power array\nvar totalPowerArray = flow.get(\"totalPowerArray\");\nif(totalPowerArray == null){\n    totalPowerArray = [];\n}\nif(totalPowerArray.length > 8640){  // 24 hours\n    totalPowerArray.shift();\n}\n\ntotalPowerArray.push(totalPwr);\nflow.set(\"totalPowerArray\", totalPowerArray);\n\n//averages\nconst totalPowersum = totalPowerArray.reduce((partialSum, a) => partialSum + a, 0);\nconst totalPowerAvg = totalPowersum / totalPowerArray.length\n\nconst fourHours = 1440;    //4 hours in 10 second samples\nconst shortTotalPowersum = totalPowerArray.slice(totalPowerArray.length - fourHours, totalPowerArray.length).reduce((partialSum, a) => partialSum + a, 0);\nconst powerAvg4h = shortTotalPowersum / fourHours\n\n\n//build 4h average array\nvar powerArray4h = flow.get(\"4hPowerArray\");\nif(powerArray4h == null){\n    powerArray4h = [];\n}\nif(powerArray4h.length > fourHours){  // 24 hours\n    powerArray4h.shift();\n}\npowerArray4h.push(powerAvg4h)\nflow.set(\"4hPowerArray\", powerArray4h)\n\n\nconst maxPower24h = Math.max(...totalPowerArray);\n\n\n\nreturn [{\"topic\": \"totalPower\", \"payload\": totalPwr},\n        {\"topic\": \"24hPowerAverage\", \"payload\": totalPowerAvg},\n        {\"topic\": \"4hPowerAverage\", \"payload\": powerAvg4h},\n        {\"topic\": \"24hMaxPower\", \"payload\": maxPower24h},\n        ]",
        "outputs": 4,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 1200,
        "wires": [
            [
                "f8fe84c28e945127",
                "a7d6b2b4ecb4f9b8"
            ],
            [
                "a7d6b2b4ecb4f9b8"
            ],
            [
                "a7d6b2b4ecb4f9b8"
            ],
            [
                "a7d6b2b4ecb4f9b8",
                "f8fe84c28e945127"
            ]
        ]
    },
    {
        "id": "f8fe84c28e945127",
        "type": "debug",
        "z": "26da8ec8a60a9d75",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1050,
        "y": 1220,
        "wires": []
    },
    {
        "id": "e6cef97982bfb3c5",
        "type": "mqtt out",
        "z": "26da8ec8a60a9d75",
        "name": "",
        "topic": "box/control/transTest",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "67b58dab33c9118c",
        "x": 820,
        "y": 2660,
        "wires": []
    },
    {
        "id": "269cf07aa1d284aa",
        "type": "function",
        "z": "26da8ec8a60a9d75",
        "name": "transpiration test diff getter",
        "func": "var p = msg.payload\nif(!p.hasOwnProperty(\"waterDiff\")){return;}\n\nif(p[\"waterDiff\"] < 0){return;}\n\nflow.set(\"lastTransTest\", new Date())\n\nvar arr = flow.get(\"daily_trans_tests\")\nif(!arr){\n    arr = []\n}\narr.push(new Date())\nflow.set(\"daily_trans_tests\",arr)\n\nreturn {\"topic\":\"grams/m^3\",\n\"payload\":p[\"waterDiff\"]\n}\n\n\n\n\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 1420,
        "wires": [
            [
                "53d73c9c01bb143a",
                "b18055e8acf3dc47",
                "cb39b8756715a7e1"
            ]
        ]
    },
    {
        "id": "b18055e8acf3dc47",
        "type": "function",
        "z": "26da8ec8a60a9d75",
        "name": "TranspirationArray builder",
        "func": "var val = msg.payload\n\nflow.set(\"lastTranspirationResult\", val)\n\nvar on_hour = flow.get(\"on_hour\");\nvar off_hour = flow.get(\"off_hour\");\n\nvar dt = new Date(); \nvar hour = dt.getHours()\nnode.warn(hour);\nvar isLightOn = false;\nvar arrayName = \"lo_transArray\"\nif((hour >= on_hour) || (hour < off_hour)){\n    isLightOn = true;\n    arrayName = \"hi_transArray\"\n}\nnode.warn(arrayName)\n\n\nvar transArray = flow.get(arrayName)\nif(transArray == null){\n    transArray = []\n}\n\nif (val > 0){\n    transArray.push(val)\n}\n\n\nif(transArray.length > 72){\n    while(transArray.length > 72){\n        transArray.shift()\n    }\n}\n\nflow.set(arrayName, transArray)\nnode.warn(transArray)\n\nmsg.isLightOn = isLightOn;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 1500,
        "wires": [
            [
                "ae57b9d6baa6473f",
                "ecb6343b8d824be2"
            ]
        ]
    },
    {
        "id": "ae57b9d6baa6473f",
        "type": "function",
        "z": "26da8ec8a60a9d75",
        "name": "trans test array analyser",
        "func": "const average = arr => arr.reduce( ( p, c ) => p + c, 0 ) / arr.length;\n    \n\nvar lo_transArray = flow.get(\"lo_transArray\")\nvar hi_transArray = flow.get(\"hi_transArray\")\n\nif(lo_transArray == null){\n    lo_transArray = []\n}\nif(hi_transArray == null){\n    hi_transArray = []\n}\n\n\n\nvar hi_avg = average(hi_transArray.slice(-5))\nvar low_avg = average(lo_transArray.slice(-5))\n\nnode.warn(hi_avg)\nnode.warn(low_avg)\nvar hi_topic = {}\nvar lo_topic = {}\n\nif(msg.isLightOn){\n    hi_topic = {\"topic\": \"high average\", \"payload\": hi_avg}\n} else {\n    lo_topic = {\"topic\": \"low average\", \"payload\": low_avg}\n}\n\nreturn [\n    hi_topic,\n    lo_topic,\n];\n\n",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 970,
        "y": 1500,
        "wires": [
            [
                "d38b4a3c142304fd"
            ],
            [
                "72b15fa1b44e9b17"
            ]
        ]
    },
    {
        "id": "d3e788b047f3fe31",
        "type": "function",
        "z": "26da8ec8a60a9d75",
        "name": "save on_hour",
        "func": "\n\n\nflow.set(\"on_hour\", msg.payload)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 880,
        "y": 2360,
        "wires": [
            []
        ]
    },
    {
        "id": "bfe4ae43fad398e9",
        "type": "function",
        "z": "26da8ec8a60a9d75",
        "name": "load on_hour",
        "func": "var on_hour = flow.get(\"on_hour\")\n\n\nif(on_hour){\n    \n    msg.payload = on_hour\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 2360,
        "wires": [
            [
                "eb153cb8b31093d1"
            ]
        ]
    },
    {
        "id": "7fc823bd9e17d06a",
        "type": "function",
        "z": "26da8ec8a60a9d75",
        "name": "load off_hour",
        "func": "var off_hour = flow.get(\"off_hour\")\n\n\nif(off_hour){\n    \n    msg.payload = off_hour\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 2400,
        "wires": [
            [
                "083179d2f7fcaffd"
            ]
        ]
    },
    {
        "id": "3d764706d926cf6b",
        "type": "function",
        "z": "26da8ec8a60a9d75",
        "name": "save off_hour",
        "func": "\n\n\nflow.set(\"off_hour\", msg.payload)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 880,
        "y": 2400,
        "wires": [
            []
        ]
    },
    {
        "id": "b45dfdd18dfe3026",
        "type": "inject",
        "z": "26da8ec8a60a9d75",
        "name": "Every 5 minutes",
        "props": [
            {
                "p": "hour_interval",
                "v": "2",
                "vt": "num"
            },
            {
                "p": "payload"
            }
        ],
        "repeat": "300",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "120",
        "payloadType": "num",
        "x": 190,
        "y": 2620,
        "wires": [
            [
                "2582d2cb09f18069",
                "057c6a8e97ce8698"
            ]
        ]
    },
    {
        "id": "2582d2cb09f18069",
        "type": "function",
        "z": "26da8ec8a60a9d75",
        "name": "add water moved last 5mins",
        "func": "var waterCounter = flow.get(\"waterCounter\")\nvar lastRate = flow.get(\"lastTranspirationResult\");\n\n/// rate will be g/m^3/120 seconds\n// current cabinet is 0.5m^3\n// ((rate * volume) / test length ) * 5 mins in seconds\n\nvar amount = ((lastRate * 0.5) / 120 ) * (60 * 5)\n// node.warn(`Amount to add ${amount}`)\nif(amount > 0){\n    waterCounter += amount\n}\n// node.warn(`waterCounter ${waterCounter}`);\n\nflow.set(\"waterCounter\", waterCounter)\n\nvar array = flow.get(\"water_moved_today\")\nif(array == null){\n    array = [];\n}\narray.push(waterCounter);\nwhile(array.length > 288){  // 24 hours (for every 5 min run)\n    array.shift();\n}\nflow.set(\"water_moved_today\", array)\n\n\n\nreturn {\"topic\": \"water moved today\", \"payload\": waterCounter };",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 2600,
        "wires": [
            [
                "45b1e8935eb33e2f"
            ]
        ]
    },
    {
        "id": "d38b4a3c142304fd",
        "type": "smooth",
        "z": "26da8ec8a60a9d75",
        "name": "average of last 2",
        "property": "payload",
        "action": "mean",
        "count": "2",
        "round": "",
        "mult": "single",
        "reduce": false,
        "x": 1240,
        "y": 1480,
        "wires": [
            [
                "53d73c9c01bb143a"
            ]
        ]
    },
    {
        "id": "72b15fa1b44e9b17",
        "type": "smooth",
        "z": "26da8ec8a60a9d75",
        "name": "average of last 2",
        "property": "payload",
        "action": "mean",
        "count": "2",
        "round": "",
        "mult": "single",
        "reduce": false,
        "x": 1240,
        "y": 1520,
        "wires": [
            [
                "53d73c9c01bb143a"
            ]
        ]
    },
    {
        "id": "7e9abbaaed331d73",
        "type": "inject",
        "z": "26da8ec8a60a9d75",
        "name": "day/night VPD sender",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "600",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 670,
        "y": 980,
        "wires": [
            [
                "f816bba2ba395026"
            ]
        ]
    },
    {
        "id": "f816bba2ba395026",
        "type": "function",
        "z": "26da8ec8a60a9d75",
        "name": "Check day or night",
        "func": "const on_hour = flow.get(\"on_hour\");\nconst off_hour = flow.get(\"off_hour\");\n\nconst dt = new Date(); \nconst hour = dt.getHours()\n// node.warn(hour);\nlet isLightOn = false;\nif((hour >= on_hour) || (hour < off_hour)){\n    isLightOn = true;\n    return {\"topic\":\"target_vpd\", \"payload\": flow.get(\"day_vpd\")}\n} else {\n    return {\"topic\":\"target_vpd\", \"payload\": flow.get(\"night_vpd\")}\n}\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1050,
        "y": 980,
        "wires": [
            [
                "d48c98512a9cbbf9",
                "36097947e9959ab7"
            ]
        ]
    },
    {
        "id": "4a9921b1c65ea5ea",
        "type": "function",
        "z": "26da8ec8a60a9d75",
        "name": "save night_vpd",
        "func": "flow.set(\"night_vpd\", msg.payload)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 1020,
        "wires": [
            [
                "f816bba2ba395026"
            ]
        ]
    },
    {
        "id": "b2f72292c9adb4bc",
        "type": "function",
        "z": "26da8ec8a60a9d75",
        "name": "save day_vpd",
        "func": "flow.set(\"day_vpd\", msg.payload)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 1080,
        "wires": [
            [
                "f816bba2ba395026"
            ]
        ]
    },
    {
        "id": "fd57eff4cdbab028",
        "type": "function",
        "z": "26da8ec8a60a9d75",
        "name": "Dehumidifier primary mode getter",
        "func": "\nvar p = msg.payload\n\nif(!p.hasOwnProperty(\"primaryHumid\")){return;}\n\nvar value =\"\"\nif (p[\"primaryHumid\"]) {\n    value  = \"on\"\n}\nelse{\n    value  = \"off\"\n}\n\n//node.warn(\"got autoVpd is \"+ value)\n\nvar json = {\"topic\":\"primaryHumid\",\n    \"payload\": value\n}\n\n\nreturn json\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 580,
        "wires": [
            [
                "6f8683208bdfda9c"
            ]
        ]
    },
    {
        "id": "ebe1663b248f5b82",
        "type": "mqtt out",
        "z": "26da8ec8a60a9d75",
        "name": "",
        "topic": "box/control/dehumidifier/primary",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "67b58dab33c9118c",
        "x": 1250,
        "y": 580,
        "wires": []
    },
    {
        "id": "728112bf974b7d6b",
        "type": "function",
        "z": "26da8ec8a60a9d75",
        "name": "Get soft max fan",
        "func": "var p = msg.payload\n\nif(p[\"softMaxFan\"]){\n    return {\"topic\":\"softMaxFan\",\n        \"payload\": p[\"softMaxFan\"]\n    }\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 1640,
        "wires": [
            [
                "5bd63bf609f7e1af"
            ]
        ]
    },
    {
        "id": "42bba20cf1d2f73c",
        "type": "mqtt out",
        "z": "26da8ec8a60a9d75",
        "name": "",
        "topic": "box/control/exhaust/softMax",
        "qos": "",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "67b58dab33c9118c",
        "x": 1020,
        "y": 1640,
        "wires": []
    },
    {
        "id": "e1afc3c561caf24c",
        "type": "smooth",
        "z": "26da8ec8a60a9d75",
        "name": "",
        "property": "payload",
        "action": "mean",
        "count": "4",
        "round": "",
        "mult": "single",
        "reduce": false,
        "x": 940,
        "y": 380,
        "wires": [
            [
                "40648a1fea3d5d1a"
            ]
        ]
    },
    {
        "id": "0bf95bdd9e1d4b10",
        "type": "smooth",
        "z": "26da8ec8a60a9d75",
        "name": "",
        "property": "payload",
        "action": "mean",
        "count": "3",
        "round": "",
        "mult": "single",
        "reduce": false,
        "x": 780,
        "y": 20,
        "wires": [
            [
                "5e56eb834c7783fe",
                "4e4aede65dfe0514"
            ]
        ]
    },
    {
        "id": "4e4aede65dfe0514",
        "type": "function",
        "z": "26da8ec8a60a9d75",
        "name": "temp buffer-acceleration",
        "func": "const average = arr => arr.reduce( ( p, c ) => p + c, 0 ) / arr.length;\n\nconst ARRAY_LENGTH = 60;\nconst deltaThresh = 0.007\n\n\nvar temp = msg.payload\n\n\nvar tempPastVals = flow.get(\"tempPastVals\")\nvar tempAcceleration = flow.get(\"tempAcceleration\")\nif(tempPastVals == null){\n    tempPastVals = []\n}\nif(tempAcceleration == null){\n    tempAcceleration = []\n}\n\ntempPastVals.push(temp)\n\nwhile(tempPastVals.length > ARRAY_LENGTH){\n    tempPastVals.shift()\n}\n\nflow.set(\"tempPastVals\", tempPastVals)\n\nvar window = 6;\nvar firstVal = tempPastVals[tempPastVals.length - window +1]\nvar lastVal = tempPastVals[tempPastVals.length -1 ]\nvar acceleration = (lastVal - firstVal) / window\n\ntempAcceleration.push(acceleration)\n\nwhile(tempAcceleration.length > ARRAY_LENGTH){\n    tempAcceleration.shift()\n}\nflow.set(\"tempAcceleration\", tempAcceleration)\n\nvar increase = lastVal - firstVal\n\n\nlet overThreshVals = tempAcceleration.filter(val => val >= deltaThresh);\nvar overpercent = (overThreshVals.length / tempAcceleration.length )* 100\n\nreturn [\n    {\"topic\": \"c/min\", \"payload\": acceleration},\n    {\"topic\": \"min change\", \"payload\": increase},\n    {\"topic\": \"over percent\", \"payload\": overpercent},\n]",
        "outputs": 3,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 80,
        "wires": [
            [
                "0a9b70fa50be15f7"
            ],
            [],
            [
                "5885274f64cb6b29",
                "d16ea90f148b12f2"
            ]
        ]
    },
    {
        "id": "bdd21fe35cbe64c4",
        "type": "function",
        "z": "26da8ec8a60a9d75",
        "name": "Alert for percent time",
        "func": "\nif(msg.payload == 100){\n    var tempPastVals = flow.get(\"tempPastVals\")\n    var lastVal = tempPastVals[tempPastVals.length -1 ]\n    \n    if(lastVal >25){\n\n        var name = flow.get(\"name\")\n        \n        msg.payload = {}\n        msg.payload.chatId = msg.TelegramClientID\n        msg.payload.type = \"message\"\n        msg.payload.content = `🔥 ${name} extreme temp spike detected! Current temp: ${lastVal}`\n        return msg;\n    }\n}\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1460,
        "y": 140,
        "wires": [
            [
                "3ed0cf3b5ccf2fb3"
            ]
        ]
    },
    {
        "id": "3ed0cf3b5ccf2fb3",
        "type": "delay",
        "z": "26da8ec8a60a9d75",
        "name": "",
        "pauseType": "rate",
        "timeout": "30",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "5",
        "rateUnits": "minute",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": false,
        "outputs": 1,
        "x": 1660,
        "y": 140,
        "wires": [
            [
                "f25cd37ee048c075"
            ]
        ]
    },
    {
        "id": "cd7211145afe9370",
        "type": "function",
        "z": "26da8ec8a60a9d75",
        "name": "humidity stability",
        "func": "var val = JSON.parse(msg.payload)\n\n\nvar errorArray = flow.get(\"humidErrorArray\")\nif(errorArray == null){\n    errorArray = []\n}\n\nerrorArray.push(val)\nflow.set(\"humidErrorArray\",errorArray);\n\n\nvar filt = errorArray.filter((val)=> val<=2.5 && val >=-2.5)\nvar stability = ( filt.length / errorArray.length ) * 100\nflow.set(\"stability\", stability);\n\n\n\nreturn {\"topic\": \"stability\", \"payload\": stability};",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1060,
        "y": 1140,
        "wires": [
            [
                "9bd52927deb6739a"
            ]
        ]
    },
    {
        "id": "9bd52927deb6739a",
        "type": "function",
        "z": "26da8ec8a60a9d75",
        "name": "Add suffix",
        "func": "msg.payload += \" %\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1260,
        "y": 1140,
        "wires": [
            [
                "ff1187493e7e096a"
            ]
        ]
    },
    {
        "id": "1b83f8b85ab413f2",
        "type": "function",
        "z": "26da8ec8a60a9d75",
        "name": "generate water report",
        "func": "const average = arr => arr.reduce( ( p, c ) => p + c, 0 ) / arr.length;\n\n// if the water moved now is less than 24 hours ago,\n// and daily water was less than yesterday was less than\n// the day before, suggest watering\n\nvar water_moved_array = flow.get(\"water_moved_today\")\nvar daily_transpiration = flow.get(\"daily_transpiration\")\nvar stability = flow.get(\"stability\")\nvar humidity_error_array = flow.get(\"humidErrorArray\")\nvar flow_name = flow.get(\"name\")\nvar trans_tests_today = flow.get(\"daily_trans_tests\")\n\nvar water_moved = water_moved_array[water_moved_array.length -1]\nvar level_24_hours_ago = water_moved_array[0]\n\nvar water_24_diff_percent = (water_moved / level_24_hours_ago) * 100\nnode.warn(water_24_diff_percent);\n\nvar total_transpiration_yesterday = daily_transpiration[daily_transpiration.length - 1]\nvar total_transpiration_day_b4_yesterday = daily_transpiration[daily_transpiration.length -2]\nvar total_transpiration_2_day_b4_yesterday = daily_transpiration[daily_transpiration.length -3]\n\nvar yesterday_diff_percent = (total_transpiration_yesterday / total_transpiration_day_b4_yesterday) * 100\n    \nvar yesterday_day_before_diff_percent = (total_transpiration_day_b4_yesterday / total_transpiration_2_day_b4_yesterday) * 100\n\nnode.warn(yesterday_day_before_diff_percent);\n\nconst humid_error_avg = average(humidity_error_array);\n\nvar soil_is_dry = false;\n\nif(water_24_diff_percent < 80){\n    soil_is_dry = true;\n}\n\n\nvar final_string = `${flow_name} \\n`\nfinal_string += `💦 Transpiration now / 24 hours ago ${String(yesterday_diff_percent).substring(0, 5)}%(${trans_tests_today.length}) \\n`\nfinal_string += `𓍝 Stability ${String(stability).substring(0, 5)}% \\n`\nfinal_string += `humidity error avg ${humid_error_avg.toFixed(2)}\\n`\n\nmsg.soil_is_dry = soil_is_dry\nmsg.payload = {}\nmsg.payload.chatId = msg.TelegramClientID\nmsg.payload.type = \"message\"\nmsg.payload.content = final_string\n\n\nreturn msg\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 2800,
        "wires": [
            [
                "673babe4162e3622"
            ]
        ]
    },
    {
        "id": "e31045171627fcdf",
        "type": "ui_switch",
        "z": "26da8ec8a60a9d75",
        "name": "",
        "label": "Dehumidifier state",
        "tooltip": "",
        "group": "49b8362b1f102d88",
        "order": 19,
        "width": 6,
        "height": 1,
        "passthru": false,
        "decouple": "true",
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "onvalue": "1",
        "onvalueType": "num",
        "onicon": "",
        "oncolor": "",
        "offvalue": "0",
        "offvalueType": "num",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 970,
        "y": 300,
        "wires": [
            [
                "e35dfd104af04611"
            ]
        ]
    },
    {
        "id": "5bf7860e0bc7ac99",
        "type": "ui_switch",
        "z": "26da8ec8a60a9d75",
        "name": "",
        "label": "auto dehumidifier",
        "tooltip": "",
        "group": "49b8362b1f102d88",
        "order": 18,
        "width": 6,
        "height": 1,
        "passthru": false,
        "decouple": "true",
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "onvalue": "on",
        "onvalueType": "str",
        "onicon": "",
        "oncolor": "",
        "offvalue": "off",
        "offvalueType": "str",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 970,
        "y": 540,
        "wires": [
            [
                "40aff9772cd6b366"
            ]
        ]
    },
    {
        "id": "04406821e76d86e2",
        "type": "ui_switch",
        "z": "26da8ec8a60a9d75",
        "name": "",
        "label": "Heater state",
        "tooltip": "",
        "group": "49b8362b1f102d88",
        "order": 14,
        "width": 6,
        "height": 1,
        "passthru": false,
        "decouple": "true",
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "onvalue": "on",
        "onvalueType": "str",
        "onicon": "",
        "oncolor": "",
        "offvalue": "off",
        "offvalueType": "str",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 970,
        "y": 460,
        "wires": [
            [
                "1baefbd031bed57d"
            ]
        ]
    },
    {
        "id": "976d97f1993b16a4",
        "type": "ui_switch",
        "z": "26da8ec8a60a9d75",
        "name": "auto vpd switch",
        "label": "auto fan Vpd Control",
        "tooltip": "",
        "group": "49b8362b1f102d88",
        "order": 17,
        "width": 6,
        "height": 1,
        "passthru": false,
        "decouple": "true",
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "onvalue": "on",
        "onvalueType": "str",
        "onicon": "",
        "oncolor": "",
        "offvalue": "off",
        "offvalueType": "str",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 960,
        "y": 500,
        "wires": [
            [
                "58a69d33dceb6b59"
            ]
        ]
    },
    {
        "id": "6f8683208bdfda9c",
        "type": "ui_switch",
        "z": "26da8ec8a60a9d75",
        "name": "",
        "label": "Dehumidifier primary",
        "tooltip": "",
        "group": "49b8362b1f102d88",
        "order": 34,
        "width": 6,
        "height": 1,
        "passthru": false,
        "decouple": "true",
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "onvalue": "on",
        "onvalueType": "str",
        "onicon": "",
        "oncolor": "",
        "offvalue": "off",
        "offvalueType": "str",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 980,
        "y": 580,
        "wires": [
            [
                "ebe1663b248f5b82"
            ]
        ]
    },
    {
        "id": "15b87b99c0fefd4a",
        "type": "ui_numeric",
        "z": "26da8ec8a60a9d75",
        "name": "Fan power text",
        "label": "fan power",
        "tooltip": "",
        "group": "49b8362b1f102d88",
        "order": 3,
        "width": 6,
        "height": 1,
        "wrap": true,
        "passthru": false,
        "topic": "topic",
        "topicType": "msg",
        "format": "{{value}}",
        "min": 0,
        "max": "100",
        "step": "0.1",
        "className": "",
        "x": 960,
        "y": 760,
        "wires": [
            [
                "5d73c6ba0deb6825"
            ]
        ]
    },
    {
        "id": "2677472d112fdc1c",
        "type": "ui_numeric",
        "z": "26da8ec8a60a9d75",
        "name": "Day target Vpd",
        "label": "Day target VPD",
        "tooltip": "",
        "group": "49b8362b1f102d88",
        "order": 26,
        "width": 6,
        "height": 1,
        "wrap": true,
        "passthru": false,
        "topic": "topic",
        "topicType": "msg",
        "format": "{{value}}",
        "min": "0.5",
        "max": "2",
        "step": "0.05",
        "className": "",
        "x": 620,
        "y": 1080,
        "wires": [
            [
                "b2f72292c9adb4bc"
            ]
        ]
    },
    {
        "id": "eb153cb8b31093d1",
        "type": "ui_numeric",
        "z": "26da8ec8a60a9d75",
        "name": "",
        "label": "On hour",
        "tooltip": "",
        "group": "49b8362b1f102d88",
        "order": 22,
        "width": 6,
        "height": 1,
        "wrap": true,
        "passthru": true,
        "topic": "topic",
        "topicType": "msg",
        "format": "{{value}}",
        "min": 0,
        "max": "24",
        "step": 1,
        "className": "",
        "x": 680,
        "y": 2360,
        "wires": [
            [
                "d3e788b047f3fe31"
            ]
        ]
    },
    {
        "id": "083179d2f7fcaffd",
        "type": "ui_numeric",
        "z": "26da8ec8a60a9d75",
        "name": "",
        "label": "Off hour",
        "tooltip": "",
        "group": "49b8362b1f102d88",
        "order": 25,
        "width": 6,
        "height": 1,
        "wrap": true,
        "passthru": true,
        "topic": "topic",
        "topicType": "msg",
        "format": "{{value}}",
        "min": 0,
        "max": "24",
        "step": 1,
        "className": "",
        "x": 680,
        "y": 2400,
        "wires": [
            [
                "3d764706d926cf6b"
            ]
        ]
    },
    {
        "id": "8104615a0f7c2f4d",
        "type": "ui_numeric",
        "z": "26da8ec8a60a9d75",
        "name": "Night target Vpd",
        "label": "Night target VPD",
        "tooltip": "",
        "group": "49b8362b1f102d88",
        "order": 23,
        "width": 6,
        "height": 1,
        "wrap": true,
        "passthru": false,
        "topic": "topic",
        "topicType": "msg",
        "format": "{{value}}",
        "min": "0.5",
        "max": "2",
        "step": "0.05",
        "className": "",
        "x": 620,
        "y": 1020,
        "wires": [
            [
                "4a9921b1c65ea5ea"
            ]
        ]
    },
    {
        "id": "42f49d5e6049d286",
        "type": "ui_slider",
        "z": "26da8ec8a60a9d75",
        "name": "Fan control slider",
        "label": "ExhaustPower",
        "tooltip": "",
        "group": "49b8362b1f102d88",
        "order": 13,
        "width": 6,
        "height": 1,
        "passthru": false,
        "outs": "end",
        "topic": "topic",
        "topicType": "msg",
        "min": 0,
        "max": "100",
        "step": "0.1",
        "className": "",
        "x": 970,
        "y": 800,
        "wires": [
            [
                "5d73c6ba0deb6825"
            ]
        ]
    },
    {
        "id": "42b30b567493f954",
        "type": "ui_text",
        "z": "26da8ec8a60a9d75",
        "group": "49b8362b1f102d88",
        "order": 29,
        "width": 6,
        "height": 1,
        "name": "",
        "label": "Last communication:",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": "",
        "color": "#000000",
        "x": 1100,
        "y": 2320,
        "wires": []
    },
    {
        "id": "3bec20de4cd4979c",
        "type": "ui_text",
        "z": "26da8ec8a60a9d75",
        "group": "49b8362b1f102d88",
        "order": 35,
        "width": 6,
        "height": 1,
        "name": "",
        "label": "effective dehumidifier power",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": "",
        "color": "#000000",
        "x": 1000,
        "y": 340,
        "wires": []
    },
    {
        "id": "931c1693c143c6b2",
        "type": "ui_text",
        "z": "26da8ec8a60a9d75",
        "group": "49b8362b1f102d88",
        "order": 5,
        "width": 12,
        "height": 1,
        "name": "",
        "label": "humidity",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": "",
        "color": "#000000",
        "x": 940,
        "y": 140,
        "wires": []
    },
    {
        "id": "6990cc63772fdebf",
        "type": "ui_text",
        "z": "26da8ec8a60a9d75",
        "group": "49b8362b1f102d88",
        "order": 7,
        "width": 12,
        "height": 1,
        "name": "",
        "label": "target humidity",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": "",
        "color": "#000000",
        "x": 960,
        "y": 220,
        "wires": []
    },
    {
        "id": "dafe22383c9d69e8",
        "type": "ui_text",
        "z": "26da8ec8a60a9d75",
        "group": "49b8362b1f102d88",
        "order": 8,
        "width": 12,
        "height": 1,
        "name": "",
        "label": "co2",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": "",
        "color": "#000000",
        "x": 730,
        "y": 140,
        "wires": []
    },
    {
        "id": "ff1187493e7e096a",
        "type": "ui_text",
        "z": "26da8ec8a60a9d75",
        "group": "49b8362b1f102d88",
        "order": 27,
        "width": 6,
        "height": 1,
        "name": "",
        "label": "Stability",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": "",
        "color": "#000000",
        "x": 1420,
        "y": 1140,
        "wires": []
    },
    {
        "id": "5e56eb834c7783fe",
        "type": "ui_chart",
        "z": "26da8ec8a60a9d75",
        "name": "tempChart",
        "group": "49b8362b1f102d88",
        "order": 39,
        "width": 12,
        "height": 3,
        "label": "Temp",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "10",
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 950,
        "y": 20,
        "wires": [
            []
        ]
    },
    {
        "id": "5b707a8c12cc868f",
        "type": "ui_chart",
        "z": "26da8ec8a60a9d75",
        "name": "co2chart",
        "group": "49b8362b1f102d88",
        "order": 1,
        "width": 12,
        "height": 3,
        "label": "co2",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "bezier",
        "nodata": "",
        "dot": false,
        "ymin": "400",
        "ymax": "3000",
        "removeOlder": "12",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9869c3",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 740,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "93fe1f0bd4359cb9",
        "type": "ui_chart",
        "z": "26da8ec8a60a9d75",
        "name": "HumidityChart",
        "group": "49b8362b1f102d88",
        "order": 41,
        "width": 12,
        "height": 3,
        "label": "humidity",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "bezier",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "10",
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#78a4dd",
            "#ff7f0e",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 960,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "2e3e5e2ac8bb5f39",
        "type": "ui_chart",
        "z": "26da8ec8a60a9d75",
        "d": true,
        "name": "ShortTermDehumidiferStateChart",
        "group": "49b8362b1f102d88",
        "order": 74,
        "width": 20,
        "height": 5,
        "label": "short term dehumidifer state",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "step",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "1",
        "removeOlder": "30",
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1020,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "b7d529bf022fca42",
        "type": "ui_chart",
        "z": "26da8ec8a60a9d75",
        "name": "fanpowerchart",
        "group": "49b8362b1f102d88",
        "order": 15,
        "width": 12,
        "height": 4,
        "label": "fan power",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "100",
        "removeOlder": "12",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 960,
        "y": 840,
        "wires": [
            []
        ]
    },
    {
        "id": "36097947e9959ab7",
        "type": "ui_chart",
        "z": "26da8ec8a60a9d75",
        "name": "VPDChart",
        "group": "49b8362b1f102d88",
        "order": 6,
        "width": 12,
        "height": 5,
        "label": "VPD",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "bezier",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "2",
        "removeOlder": "12",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#ff7f0e",
            "#3bf15a",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1260,
        "y": 900,
        "wires": [
            []
        ]
    },
    {
        "id": "7843d0e0f6b4f696",
        "type": "ui_chart",
        "z": "26da8ec8a60a9d75",
        "name": "Reset charts",
        "group": "49b8362b1f102d88",
        "order": 80,
        "width": 24,
        "height": 4,
        "label": "Resets",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "1",
        "removeOlder": "24",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 110,
        "y": 580,
        "wires": [
            []
        ]
    },
    {
        "id": "40648a1fea3d5d1a",
        "type": "ui_chart",
        "z": "26da8ec8a60a9d75",
        "name": "Effective Dehumidifier power chart",
        "group": "49b8362b1f102d88",
        "order": 37,
        "width": 12,
        "height": 4,
        "label": "Effective Dehumidifier power",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "Calculating..",
        "dot": false,
        "ymin": "0",
        "ymax": "100",
        "removeOlder": "12",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1260,
        "y": 380,
        "wires": [
            []
        ]
    },
    {
        "id": "8840b1c4650c95d5",
        "type": "ui_chart",
        "z": "26da8ec8a60a9d75",
        "name": "",
        "group": "49b8362b1f102d88",
        "order": 58,
        "width": 20,
        "height": 7,
        "label": "humidity error",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "-5",
        "ymax": "5",
        "removeOlder": "30",
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#db4848",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1060,
        "y": 1100,
        "wires": [
            []
        ]
    },
    {
        "id": "185aead36a310ed9",
        "type": "ui_chart",
        "z": "26da8ec8a60a9d75",
        "name": "",
        "group": "49b8362b1f102d88",
        "order": 66,
        "width": 20,
        "height": 7,
        "label": "short term fan power",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "30",
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1060,
        "y": 720,
        "wires": [
            []
        ]
    },
    {
        "id": "a7d6b2b4ecb4f9b8",
        "type": "ui_chart",
        "z": "26da8ec8a60a9d75",
        "d": true,
        "name": "",
        "group": "49b8362b1f102d88",
        "order": 43,
        "width": 24,
        "height": 7,
        "label": "total Power",
        "chartType": "line",
        "legend": "true",
        "xformat": "HH:mm:ss",
        "interpolate": "bezier",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "12",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff0000",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1050,
        "y": 1180,
        "wires": [
            []
        ]
    },
    {
        "id": "53d73c9c01bb143a",
        "type": "ui_chart",
        "z": "26da8ec8a60a9d75",
        "name": "",
        "group": "49b8362b1f102d88",
        "order": 36,
        "width": 12,
        "height": 7,
        "label": "transpiration impulse response ",
        "chartType": "line",
        "legend": "true",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "",
        "removeOlder": "24",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#9433c1",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1550,
        "y": 1420,
        "wires": [
            []
        ]
    },
    {
        "id": "ae412bec0715b76a",
        "type": "ui_chart",
        "z": "26da8ec8a60a9d75",
        "d": true,
        "name": "",
        "group": "49b8362b1f102d88",
        "order": 42,
        "width": 24,
        "height": 9,
        "label": "Lifetime high transpiration rate",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "100",
        "removeOlderPoints": "",
        "removeOlderUnit": "86400",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#bc8ce3",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1330,
        "y": 1580,
        "wires": [
            []
        ]
    },
    {
        "id": "45b1e8935eb33e2f",
        "type": "ui_chart",
        "z": "26da8ec8a60a9d75",
        "name": "",
        "group": "49b8362b1f102d88",
        "order": 51,
        "width": 14,
        "height": 6,
        "label": "water counter",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "24",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 800,
        "y": 2600,
        "wires": [
            []
        ]
    },
    {
        "id": "3217b403c1c2f878",
        "type": "ui_chart",
        "z": "26da8ec8a60a9d75",
        "name": "",
        "group": "49b8362b1f102d88",
        "order": 49,
        "width": 24,
        "height": 6,
        "label": "Daily transpiration ",
        "chartType": "bar",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": true,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1310,
        "y": 2580,
        "wires": [
            []
        ]
    },
    {
        "id": "5885274f64cb6b29",
        "type": "ui_chart",
        "z": "26da8ec8a60a9d75",
        "d": true,
        "name": "",
        "group": "49b8362b1f102d88",
        "order": 38,
        "width": 12,
        "height": 4,
        "label": "over thresh percent",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "1",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1250,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "0a9b70fa50be15f7",
        "type": "ui_chart",
        "z": "26da8ec8a60a9d75",
        "name": "",
        "group": "49b8362b1f102d88",
        "order": 40,
        "width": 12,
        "height": 4,
        "label": "2 min temp change",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "30",
        "removeOlderPoints": "10",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1250,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "b9e7014a65e32c9f",
        "type": "ui_chart",
        "z": "26da8ec8a60a9d75",
        "name": "",
        "group": "49b8362b1f102d88",
        "order": 48,
        "width": 24,
        "height": 6,
        "label": "Daily Stability ",
        "chartType": "bar",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": true,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1300,
        "y": 2620,
        "wires": [
            []
        ]
    },
    {
        "id": "5bd63bf609f7e1af",
        "type": "ui_text_input",
        "z": "26da8ec8a60a9d75",
        "name": "",
        "label": "soft max fan",
        "tooltip": "",
        "group": "49b8362b1f102d88",
        "order": 11,
        "width": 6,
        "height": 1,
        "passthru": false,
        "mode": "number",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 770,
        "y": 1640,
        "wires": [
            [
                "42bba20cf1d2f73c"
            ]
        ]
    },
    {
        "id": "315891178173b158",
        "type": "telegram sender",
        "z": "26da8ec8a60a9d75",
        "name": "",
        "bot": "353ee16983fbc803",
        "haserroroutput": false,
        "outputs": 1,
        "x": 1400,
        "y": 2260,
        "wires": [
            []
        ]
    },
    {
        "id": "f25cd37ee048c075",
        "type": "telegram sender",
        "z": "26da8ec8a60a9d75",
        "name": "",
        "bot": "353ee16983fbc803",
        "haserroroutput": false,
        "outputs": 1,
        "x": 1850,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "673babe4162e3622",
        "type": "telegram sender",
        "z": "26da8ec8a60a9d75",
        "name": "",
        "bot": "353ee16983fbc803",
        "haserroroutput": false,
        "outputs": 1,
        "x": 1250,
        "y": 2740,
        "wires": [
            []
        ]
    },
    {
        "id": "9ef143a7d6578b99",
        "type": "credentials",
        "z": "26da8ec8a60a9d75",
        "name": "TargettelegramchatID",
        "props": [
            {
                "value": "TelegramClientID",
                "type": "msg"
            }
        ],
        "x": 460,
        "y": 2180,
        "wires": [
            [
                "e03ff1ccdfb68112",
                "4e13a533d6304469",
                "2e510d55ad397d75",
                "5e73258ca3571246"
            ]
        ]
    },
    {
        "id": "d16ea90f148b12f2",
        "type": "credentials",
        "z": "26da8ec8a60a9d75",
        "name": "TargettelegramchatID",
        "props": [
            {
                "value": "TelegramClientID",
                "type": "msg"
            }
        ],
        "x": 1240,
        "y": 140,
        "wires": [
            [
                "bdd21fe35cbe64c4"
            ]
        ]
    },
    {
        "id": "94a19fcbfb157c6c",
        "type": "credentials",
        "z": "26da8ec8a60a9d75",
        "name": "TargettelegramchatID",
        "props": [
            {
                "value": "TelegramClientID",
                "type": "msg"
            }
        ],
        "x": 740,
        "y": 2800,
        "wires": [
            [
                "1b83f8b85ab413f2"
            ]
        ]
    },
    {
        "id": "ab473525134d175f",
        "type": "file",
        "z": "26da8ec8a60a9d75",
        "d": true,
        "name": "Save to ~/environ",
        "filename": "/home/pi/environ.csv",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 250,
        "y": 780,
        "wires": [
            []
        ]
    },
    {
        "id": "cb39b8756715a7e1",
        "type": "debug",
        "z": "26da8ec8a60a9d75",
        "name": "debug 1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 900,
        "y": 1440,
        "wires": []
    },
    {
        "id": "851b2ee65d2e0b8c",
        "type": "function",
        "z": "26da8ec8a60a9d75",
        "name": "Approximate door state",
        "func": "const average = arr => arr.reduce((p, c) => p + c, 0) / arr.length;\n\nvar totalSignal = 0;\n\nvar fanPowerArray = flow.get(\"fanPastVals\")\nif (fanPowerArray == null) {\n    fanPowerArray = [0];\n}\nvar avg = average(fanPowerArray.slice(-30, fanPowerArray.length)); // last 5 mins\n// node.warn(`fan average ${avg}`)\nif(avg < 2){\n    totalSignal += 0.4;\n}\n\nvar humidity = flow.get(\"RH\")\nif(humidity < 50){\n    totalSignal += 0.6;\n}\n\n// node.warn(totalSignal);\n\nvar payload = \"CLOSED\"\nif(totalSignal > 0){\n    payload = \"MAYBE\"\n}\n\nif(totalSignal >= 0.6){\n    payload = \"OPEN\"\n}\nif(totalSignal == 1){\n    payload = \"DEFINITELY OPEN\"\n}\n\nflow.set(\"door_state\", payload);\n\nreturn {\"topic\": \"doorState\", \"payload\": payload};",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 2480,
        "wires": [
            [
                "c0c403bed3284a5d"
            ]
        ]
    },
    {
        "id": "c0c403bed3284a5d",
        "type": "ui_text",
        "z": "26da8ec8a60a9d75",
        "group": "49b8362b1f102d88",
        "order": 2,
        "width": 6,
        "height": 1,
        "name": "",
        "label": "Door state",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 790,
        "y": 2480,
        "wires": []
    },
    {
        "id": "1ae9a00d73d46cd9",
        "type": "function",
        "z": "26da8ec8a60a9d75",
        "name": "Layout :)",
        "func": "\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 1320,
        "wires": [
            [
                "d3e8ac510b879f93",
                "71c8159642985349",
                "24c82386a0c42a3d"
            ]
        ]
    },
    {
        "id": "ecb6343b8d824be2",
        "type": "function",
        "z": "26da8ec8a60a9d75",
        "name": "Return > highest_transpiration",
        "func": "function formatDateToDDMM(date) {\n  const day = String(date.getDate()).padStart(2, '0'); // Get day and pad with leading zero if needed\n  const month = String(date.getMonth() + 1).padStart(2, '0'); // Get month (months are 0-based) and pad with leading zero if needed\n\n  return `${day}/${month}`;\n}\n\nvar number = msg.payload;\n\nvar biggest = flow.get(\"highest_transpiration\")\nif(biggest == null){\n    biggest = 0\n}\n\nif(number > biggest){\n    flow.set(\"highest_transpiration\", number)\n    const currentDate = new Date();\n    const formattedDate = formatDateToDDMM(currentDate);\n    return {\"topic\": formattedDate, \"payload\":msg.payload}\n\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 1540,
        "wires": [
            [
                "ae412bec0715b76a"
            ]
        ]
    },
    {
        "id": "4e13a533d6304469",
        "type": "function",
        "z": "26da8ec8a60a9d75",
        "name": "Missing sensors timediff",
        "func": "var lastpayload = flow.get(\"last_sensor_value\");\n\nconst diff = Date.now() - lastpayload\n//node.warn(\"last communication from controller was @ \" + new Date(lastpayload) +\"\\n\"+ diff /1000 + \" seconds ago \")\n\nvar maxTimeNoCommunicationMins = 10\n\nif( diff /1000 < maxTimeNoCommunicationMins* 60 ){\n    return 0;\n}\n\nvar name = flow.get(\"name\")\nmsg.payload = {}\nmsg.payload.chatId = msg.TelegramClientID\nmsg.payload.type = \"message\"\nmsg.payload.content = `No sensor data from ${name} controller for `+ (diff/1000)/60+\" mins\"\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 2180,
        "wires": [
            [
                "6a6e4aff7e4751be"
            ]
        ]
    },
    {
        "id": "2e510d55ad397d75",
        "type": "function",
        "z": "26da8ec8a60a9d75",
        "name": "dupe temp value checker",
        "func": "const allEqual = arr => arr.every(v => parseFloat(v).toFixed(4) === parseFloat(arr[0]).toFixed(4))\n\nvar past_temp_vals = flow.get(\"tempPastVals\")\nif(past_temp_vals !=null){\n\n    var last_ten = past_temp_vals.slice(Math.max(past_temp_vals.length - 10, 1))\n    // node.warn(last_ten);\n    if(allEqual(last_ten)){\n        var name = flow.get(\"name\")\n        msg.payload = {}\n        msg.payload.chatId = msg.TelegramClientID\n        msg.payload.type = \"message\"\n        msg.payload.content = `${name} Sensors giving duplicate values. Sensor failure`\n        return msg;\n    }\n\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 2220,
        "wires": [
            [
                "5f589a96240e6454"
            ]
        ]
    },
    {
        "id": "d00c7191994ec6ed",
        "type": "function",
        "z": "26da8ec8a60a9d75",
        "name": "Flow settings",
        "func": "flow.set(\"name\", \"Flowerbox\")\nflow.set(\"flow_rate\", 150)\nflow.set(\"trans_test_time\", 120)\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 2240,
        "wires": [
            []
        ]
    },
    {
        "id": "1d8087e8ae190b2d",
        "type": "function",
        "z": "26da8ec8a60a9d75",
        "name": "targetVPD getter 2",
        "func": "var p = msg.payload\n\n\nflow.set(\"targetVPD\", p[\"TVpd\"])\nvar json = {\"topic\":\"Controller_Target\",\n    \"payload\": p[\"TVpd\"]\n}\n\n\nreturn json\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 1580,
        "wires": [
            [
                "ae412bec0715b76a"
            ]
        ]
    },
    {
        "id": "1b05e26c002d4aa6",
        "type": "mqtt out",
        "z": "26da8ec8a60a9d75",
        "name": "",
        "topic": "box/control/pump",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "67b58dab33c9118c",
        "x": 830,
        "y": 2940,
        "wires": []
    },
    {
        "id": "519f1c0d76dcb70d",
        "type": "function",
        "z": "26da8ec8a60a9d75",
        "name": "load auto_water_amount",
        "func": "var amount = flow.get(\"auto_water_amount\")\n\n\nif(amount){\n    \n    msg.payload = amount\n    return msg;\n}\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 2440,
        "wires": [
            [
                "45a1bd7c715223ae"
            ]
        ]
    },
    {
        "id": "81e320cfbd9699a9",
        "type": "function",
        "z": "26da8ec8a60a9d75",
        "name": "save auto_water_amount",
        "func": "\n\n\nflow.set(\"auto_water_amount\", msg.payload)\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1110,
        "y": 2440,
        "wires": [
            []
        ]
    },
    {
        "id": "45a1bd7c715223ae",
        "type": "ui_text_input",
        "z": "26da8ec8a60a9d75",
        "name": "",
        "label": "auto water amount (ml)",
        "tooltip": "",
        "group": "49b8362b1f102d88",
        "order": 68,
        "width": 4,
        "height": 1,
        "passthru": true,
        "mode": "number",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 830,
        "y": 2440,
        "wires": [
            [
                "81e320cfbd9699a9"
            ]
        ]
    },
    {
        "id": "a2c78ad62e41bfa0",
        "type": "ui_button",
        "z": "26da8ec8a60a9d75",
        "name": "",
        "group": "49b8362b1f102d88",
        "order": 81,
        "width": 5,
        "height": 1,
        "passthru": false,
        "label": "water",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "60",
        "payloadType": "num",
        "topic": "topic",
        "topicType": "msg",
        "x": 290,
        "y": 2960,
        "wires": [
            [
                "f7e51fcb2d8f9009"
            ]
        ]
    },
    {
        "id": "f7e51fcb2d8f9009",
        "type": "function",
        "z": "26da8ec8a60a9d75",
        "name": "get amount and send seconds",
        "func": "var flowRate = 150; ///ml per minute\n\nvar amount = flow.get(\"manual_water_amount\")\n\n\nvar seconds = (amount /flowRate) * 60\nmsg.payload = parseInt(seconds)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 2960,
        "wires": [
            [
                "1b05e26c002d4aa6"
            ]
        ]
    },
    {
        "id": "498f2e3b9862be5c",
        "type": "function",
        "z": "26da8ec8a60a9d75",
        "name": "reset daily counters",
        "func": "function formatDateToDDMM(date) {\n  const day = String(date.getDate()).padStart(2, '0'); // Get day and pad with leading zero if needed\n  const month = String(date.getMonth() + 1).padStart(2, '0'); // Get month (months are 0-based) and pad with leading zero if needed\n\n  return `${day}/${month}`;\n}\n\n\nconst yesterday = new Date();\nyesterday.setDate(yesterday.getDate() - 1)  //day before cuz this runs at midnight\nconst formattedDateYesterday = formatDateToDDMM(yesterday);\n\n/// daily transpiration\nvar currentTotal = flow.get(\"waterCounter\");\nflow.set(\"waterCounter\", 0);\n\nvar array = flow.get(\"daily_transpiration\")\nif(array == null){\n    array = [];\n}\narray.push(currentTotal);\nwhile(array.length > 7){  // 7 days\n    array.shift();\n}\nflow.set(\"daily_transpiration\", array)\n/////\n\n///stability\nvar finalErrorArray = flow.get(\"humidErrorArray\");\nnode.warn(finalErrorArray)\nflow.set(\"humidErrorArray\", []);\nvar filt = finalErrorArray.filter((val)=> val <= 2.5 && val >= -2.5)\nnode.warn(filt)\nvar stability = (filt.length / finalErrorArray.length) * 100\nnode.warn(stability);\nvar array = flow.get(\"daily_stability\")\nif (array == null) {\n  array = [];\n}\narray.push(stability);\nwhile (array.length > 7) {  // 7 days\n  array.shift();\n}\nnode.warn(array);\nflow.set(\"daily_stability\", array)\n//\n\n/// amount watered via pump\nvar water_today = flow.get(\"water_added_today\")\nflow.set(\"water_added_today\", 0)\nvar array = flow.get(\"daily_water_added\")\nif (array == null) {\n  array = [];\n}\narray.push(water_today);\nwhile (array.length > 7) {  // 7 days\n  array.shift();\n}\nflow.set(\"daily_water_added\", array)\nif(isNaN(water_today)){\n  water_today = 0\n}\n////\n\n//clear daily trans test record\nflow.set(\"daily_trans_tests\", [])\n\n\nreturn [\n        {\"topic\": `t${formattedDateYesterday}`, \"payload\": currentTotal},\n        { \"topic\": `s${formattedDateYesterday}`, \"payload\": stability},\n        { \"topic\": `w${formattedDateYesterday}`, \"payload\": water_today }\n      ]",
        "outputs": 3,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 2740,
        "wires": [
            [
                "3217b403c1c2f878",
                "74d110b64eb7c6bf"
            ],
            [
                "b9e7014a65e32c9f",
                "74d110b64eb7c6bf"
            ],
            [
                "8db30af22cf93342",
                "74d110b64eb7c6bf"
            ]
        ]
    },
    {
        "id": "8db30af22cf93342",
        "type": "ui_chart",
        "z": "26da8ec8a60a9d75",
        "name": "",
        "group": "49b8362b1f102d88",
        "order": 50,
        "width": 24,
        "height": 6,
        "label": "Water added ",
        "chartType": "bar",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": true,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1290,
        "y": 2660,
        "wires": [
            []
        ]
    },
    {
        "id": "ea7a1f4fcdd2c047",
        "type": "ui_text_input",
        "z": "26da8ec8a60a9d75",
        "name": "",
        "label": "manual water amount (ml)",
        "tooltip": "",
        "group": "49b8362b1f102d88",
        "order": 69,
        "width": 4,
        "height": 1,
        "passthru": true,
        "mode": "number",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 230,
        "y": 3020,
        "wires": [
            [
                "b58fbf8722af4fa9"
            ]
        ]
    },
    {
        "id": "b58fbf8722af4fa9",
        "type": "function",
        "z": "26da8ec8a60a9d75",
        "name": "save manual_water_amount",
        "func": "\n\n\nflow.set(\"manual_water_amount\", msg.payload)\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 3020,
        "wires": [
            []
        ]
    },
    {
        "id": "cedd795d199e5af0",
        "type": "debug",
        "z": "26da8ec8a60a9d75",
        "name": "debug 3",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 840,
        "y": 3260,
        "wires": []
    },
    {
        "id": "74d110b64eb7c6bf",
        "type": "debug",
        "z": "26da8ec8a60a9d75",
        "name": "debug 4",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1280,
        "y": 2540,
        "wires": []
    },
    {
        "id": "f143e4fe2e9e11f3",
        "type": "function",
        "z": "26da8ec8a60a9d75",
        "name": "load water_added_today",
        "func": "var amount = flow.get(\"water_added_today\")\n\nmsg.payload = amount\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 2520,
        "wires": [
            [
                "c65408d3f749e4ba"
            ]
        ]
    },
    {
        "id": "c65408d3f749e4ba",
        "type": "ui_text",
        "z": "26da8ec8a60a9d75",
        "group": "49b8362b1f102d88",
        "order": 70,
        "width": 4,
        "height": 1,
        "name": "",
        "label": "Water added today",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 810,
        "y": 2520,
        "wires": []
    },
    {
        "id": "8df0d54156632d30",
        "type": "function",
        "z": "26da8ec8a60a9d75",
        "name": "is start of day",
        "func": "var last_report = flow.get(\"lastWaterReport\")\nif (!last_report) {\n    last_report = new Date(-111000000)\n    flow.set(\"lastWaterReport\", last_report)\n}\n\nconst currentTime = new Date();\n// @ts-ignore\nconst milliseconds = Math.abs(currentTime - last_report);\nconst hours_ago = milliseconds / 1000 / 60 / 60\n\nif (hours_ago < 12) {return;}\n\nvar light_on_hour = flow.get(\"on_hour\")\nconst current_hour = currentTime.getHours()\nif (current_hour != light_on_hour) {\n    return;\n}\n\nflow.set(\"lastWaterReport\", new Date())\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 2760,
        "wires": [
            [
                "94a19fcbfb157c6c",
                "e219e743c49cecf1"
            ]
        ]
    },
    {
        "id": "876a476d4708c8e1",
        "type": "inject",
        "z": "26da8ec8a60a9d75",
        "name": "Every 1 minutes",
        "props": [
            {
                "p": "hour_interval",
                "v": "2",
                "vt": "str"
            },
            {
                "p": "payload"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "120",
        "payloadType": "str",
        "x": 210,
        "y": 2760,
        "wires": [
            [
                "8df0d54156632d30",
                "50b3bd48ad6d0715"
            ]
        ]
    },
    {
        "id": "057c6a8e97ce8698",
        "type": "function",
        "z": "26da8ec8a60a9d75",
        "name": "Check if trans test should happen",
        "func": "const average = arr => arr.reduce( ( p, c ) => p + c, 0 ) / arr.length;\n\nvar last_test = flow.get(\"lastTransTest\")\n\nif (!last_test) {\n    node.warn(\"no last test!\");\n    last_test = new Date(-8640000000000000);\n}\n\n\nconst currentTime = new Date();\n// @ts-ignore\nconst milliseconds = Math.abs(currentTime - last_test);\nconst hours_ago = milliseconds / 1000 / 60 / 60\nnode.warn(`last trans test was ${hours_ago} hours ago`);\n\nif (hours_ago < msg.hour_interval) { return; }\n\n// check if door is open  \n//if (flow.get(\"door_state\") != \"CLOSED\"){\n//    return;\n//}\n\n//check stability\n\nvar humidityErrorArray = flow.get(\"humidErrorArray\");\nif(humidityErrorArray){\n\n    var avg = average(humidityErrorArray.slice(-10))\n    if(avg > 5 || avg < -5){\n        return;\n    }\n\n}\n\nnode.warn(\"Starting transpiration test!\");\nvar time = flow.get(\"trans_test_time\")\nif(!time){\n    time = 120;\n}\nmsg.payload = time;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 2640,
        "wires": [
            [
                "e6cef97982bfb3c5"
            ]
        ]
    },
    {
        "id": "c313aa35350879c0",
        "type": "function",
        "z": "26da8ec8a60a9d75",
        "name": "pump water added",
        "func": "var flowRate = flow.get(\"flow_rate\")\n\nvar p = msg.payload\nif (!p.hasOwnProperty(\"pump_time_active\")) { return; }\n\n\nvar seconds_active = p[\"pump_time_active\"]\n\nvar amount = (flowRate / 60) * seconds_active;\n\nvar m_watered = flow.get(\"water_added_today\");\nif(!m_watered){\n    m_watered = 0\n}\nm_watered += amount\nflow.set(\"water_added_today\", Math.round(m_watered))\n\n\nreturn [{\n    \"topic\": \"pump_time_active\",\n    \"payload\": p[\"pump_time_active\"]\n},\n{\"topic\": \"early_stop\", \"payload\": parseInt(p[\"early_stop\"]) * 500}\n]\n\n\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 1740,
        "wires": [
            [
                "9299514b2a6ebbdb",
                "077d2a87cb4fd3ce"
            ],
            [
                "077d2a87cb4fd3ce"
            ]
        ]
    },
    {
        "id": "9299514b2a6ebbdb",
        "type": "debug",
        "z": "26da8ec8a60a9d75",
        "name": "debug 5",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 780,
        "y": 1720,
        "wires": []
    },
    {
        "id": "07b28a2d84609eaf",
        "type": "ui_text_input",
        "z": "26da8ec8a60a9d75",
        "name": "",
        "label": "P",
        "tooltip": "",
        "group": "49b8362b1f102d88",
        "order": 28,
        "width": 6,
        "height": 1,
        "passthru": false,
        "mode": "number",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 890,
        "y": 1280,
        "wires": [
            [
                "c37d55b54e1b090f"
            ]
        ]
    },
    {
        "id": "e6116ea094cf1925",
        "type": "ui_text_input",
        "z": "26da8ec8a60a9d75",
        "name": "",
        "label": "I",
        "tooltip": "",
        "group": "49b8362b1f102d88",
        "order": 30,
        "width": 6,
        "height": 1,
        "passthru": false,
        "mode": "number",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 890,
        "y": 1320,
        "wires": [
            [
                "dfbce4f0c5e7b5ff"
            ]
        ]
    },
    {
        "id": "f95562a917df3392",
        "type": "ui_text_input",
        "z": "26da8ec8a60a9d75",
        "name": "",
        "label": "D",
        "tooltip": "",
        "group": "49b8362b1f102d88",
        "order": 33,
        "width": 6,
        "height": 1,
        "passthru": false,
        "mode": "number",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 890,
        "y": 1360,
        "wires": [
            [
                "d39bdcd09019dd28"
            ]
        ]
    },
    {
        "id": "52355499062cd4e4",
        "type": "debug",
        "z": "26da8ec8a60a9d75",
        "name": "debug 6",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 260,
        "y": 400,
        "wires": []
    },
    {
        "id": "1fef863b71482bbe",
        "type": "function",
        "z": "26da8ec8a60a9d75",
        "name": "water sensor 1 getter",
        "func": "var p = msg.payload\n\nreturn [\n    { \"topic\": \"Pot water sensor\", \"payload\": p[\"w1\"] },\n    {\"topic\":\"Pot sensor threshold\", \"payload\": p[\"w1T\"]}\n]\n\n\n",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 2000,
        "wires": [
            [
                "9596f93281d93c37"
            ],
            [
                "9596f93281d93c37"
            ]
        ]
    },
    {
        "id": "9596f93281d93c37",
        "type": "ui_chart",
        "z": "26da8ec8a60a9d75",
        "name": "",
        "group": "49b8362b1f102d88",
        "order": 86,
        "width": 24,
        "height": 5,
        "label": "water Sensor 1",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "bezier",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "48",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#4880db",
            "#fd2121",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 820,
        "y": 1980,
        "wires": [
            []
        ]
    },
    {
        "id": "0dbbfb1837ed0a84",
        "type": "ui_text",
        "z": "26da8ec8a60a9d75",
        "group": "49b8362b1f102d88",
        "order": 4,
        "width": 12,
        "height": 1,
        "name": "",
        "label": "Temp",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 770,
        "y": 60,
        "wires": []
    },
    {
        "id": "42e09d98f5bfbdf1",
        "type": "ui_switch",
        "z": "26da8ec8a60a9d75",
        "name": "auto heater switch",
        "label": "auto heater",
        "tooltip": "",
        "group": "49b8362b1f102d88",
        "order": 16,
        "width": 6,
        "height": 1,
        "passthru": false,
        "decouple": "true",
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "onvalue": "auto",
        "onvalueType": "str",
        "onicon": "",
        "oncolor": "",
        "offvalue": "man",
        "offvalueType": "str",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 970,
        "y": 420,
        "wires": [
            [
                "1baefbd031bed57d"
            ]
        ]
    },
    {
        "id": "16a0427bb4f56759",
        "type": "function",
        "z": "26da8ec8a60a9d75",
        "name": "autoHeaterStateGetter",
        "func": "\nvar p = msg.payload\n\nvar value =\"\"\nif (p[\"autoHeater\"] == 0) {\n    value  = \"man\"\n}\nif (p[\"autoHeater\"] == 1) {\n    value  = \"auto\"\n}\n\n\n\nreturn {\n    \"topic\":\"autoHeater\",\n    \"payload\": value\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 420,
        "wires": [
            [
                "42e09d98f5bfbdf1"
            ]
        ]
    },
    {
        "id": "93b5674b5bac8fbb",
        "type": "inject",
        "z": "26da8ec8a60a9d75",
        "name": "Manual",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "120",
        "payloadType": "num",
        "x": 610,
        "y": 2700,
        "wires": [
            [
                "e6cef97982bfb3c5"
            ]
        ]
    },
    {
        "id": "e219e743c49cecf1",
        "type": "delay",
        "z": "26da8ec8a60a9d75",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 700,
        "y": 2740,
        "wires": [
            [
                "498f2e3b9862be5c"
            ]
        ]
    },
    {
        "id": "1c69b7402edbe972",
        "type": "function",
        "z": "26da8ec8a60a9d75",
        "name": "heater getter",
        "func": "var p = msg.payload\nif(!p.hasOwnProperty(\"H\")){return;}\n\nvar heaterState = p[\"H\"]\n\nif(heaterState){\n    heaterState = 1;\n} else {\n    heaterState = 0;\n}\n\nreturn {\"topic\":\"heater\",\n    \"payload\": heaterState\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 940,
        "wires": [
            [
                "713893f52f60d808"
            ]
        ]
    },
    {
        "id": "713893f52f60d808",
        "type": "ui_chart",
        "z": "26da8ec8a60a9d75",
        "name": "",
        "group": "49b8362b1f102d88",
        "order": 24,
        "width": 12,
        "height": 3,
        "label": "Heater chart",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "1",
        "removeOlder": "12",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 870,
        "y": 940,
        "wires": [
            []
        ]
    },
    {
        "id": "ec0b41a4293eaef9",
        "type": "smooth",
        "z": "26da8ec8a60a9d75",
        "name": "",
        "property": "payload",
        "action": "mean",
        "count": "10",
        "round": "",
        "mult": "single",
        "reduce": false,
        "x": 600,
        "y": 1960,
        "wires": [
            [
                "9596f93281d93c37"
            ]
        ]
    },
    {
        "id": "50b3bd48ad6d0715",
        "type": "function",
        "z": "26da8ec8a60a9d75",
        "name": "Check auto water times",
        "func": "function addHours(date, hours) {\n    const dateCopy = new Date(date.getTime());\n    const hoursToAdd = hours * 60 * 60 * 1000;\n    dateCopy.setTime(date.getTime() + hoursToAdd);\n    return dateCopy;\n}\n\n// must not be triggered too often\n// If watering is already in progress when the command\n// is sent it will be ignored by the controller,\n// The watering index will be moved ahead, and the \n// water interval will be skipped\n\nvar last_auto_water = flow.get(\"last_auto_water_time\")\nif (!last_auto_water) {\n    node.warn(\"last auto water time not found\");\n    return;\n}\n\nconst currentTime = new Date();\n// @ts-ignore\nconst milliseconds = Math.abs(currentTime - last_auto_water);\nconst hours_ago = milliseconds / 1000 / 60 / 60\n// node.warn(`last auto water was ${hours_ago} hours ago`);\n\n//90% allows times to be slightly earlier each run until it is at the start of the hour\nif (hours_ago < (flow.get(\"auto_water_hour_interval\")*0.99)) { return; }\n\n\nvar times = flow.get(\"autoWaterTimes\");\n// node.warn(times)\nif(times.length >0){\n    var date = new Date();\n    var current_hour = date.getHours()\n    // var index = flow.get(\"autoWaterNextIndex\");\n    // var nextHour = times[index];\n\n    var next_time;\n    var next_index = 0;\n    for (let index = 0; index < times.length; index++) {\n        const element = times[index];\n        if (element > last_auto_water){\n            next_time = element\n            next_index = index +1;\n            break;\n        }\n    }\n    node.warn(`last auto-water was ${last_auto_water}`);\n    node.warn(`next water time is ${next_time}`);\n\n\n    if (date >= next_time){\n        node.warn(\"auto Watering!!\");\n        // var nextIndex = index+1\n        // if (nextIndex > times.length -1){\n        //     nextIndex =0;\n        // }\n        // node.warn(`next index ${nextIndex}`);\n        // flow.set(\"autoWaterNextIndex\", nextIndex)\n\n        // Add new time to array and remove oldest\n        var hour_interval = flow.get(\"auto_water_hour_interval\");\n\n        // var t = new Date();\n        // t.setTime(t.getTime() + ((times.length-1) * hour_interval * 60 * 60 * 1000));\n\n        // new_time.setTime(new_time.getTime() + (hour_interval * 60 * 60 * 1000));\n        var oldest = times[times.length -1];\n        var t = addHours(oldest, hour_interval)\n\n        times.push(t);\n        times.shift();\n\n        flow.set(\"autoWaterTimes\", times)\n        flow.set(\"last_auto_water_time\", date)\n\n        var flowRate = 150; ///ml per minute\n        var amount = flow.get(\"auto_water_amount\")\n        var seconds = (amount / flowRate) * 60\n        msg.payload = parseInt(seconds)\n        return msg;\n\n    }\n    node.warn(\"not time to autowater\")\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 2900,
        "wires": [
            [
                "1b05e26c002d4aa6",
                "37c66c6698ef2b26"
            ]
        ]
    },
    {
        "id": "d9d76e60bfeb783d",
        "type": "ui_switch",
        "z": "26da8ec8a60a9d75",
        "name": "",
        "label": "auto water",
        "tooltip": "",
        "group": "49b8362b1f102d88",
        "order": 82,
        "width": 3,
        "height": 1,
        "passthru": true,
        "decouple": "false",
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 550,
        "y": 3120,
        "wires": [
            [
                "be7a2917b80c8b59"
            ]
        ]
    },
    {
        "id": "be7a2917b80c8b59",
        "type": "function",
        "z": "26da8ec8a60a9d75",
        "name": "Make auto water array",
        "func": "Date.prototype.addHours = function(h) {\n  this.setTime(this.getTime() + (h*60*60*1000));\n  return this;\n}\n\n\nif(msg.payload){\n    // var intervals = flow.get(\"auto_water_intervals\");\n\n    var hour_interval = flow.get(\"auto_water_hour_interval\");\n\n    node.warn(`interval spacing ${hour_interval}`)\n    var waterTimes = []\n    // for (let index = 0; index < intervals; index++) {\n    //     waterTimes[index] = index * 24/intervals ;\n    // }\n\n    // node.warn(`num_days ${num_days}`);\n    var now = new Date();\n    now.setSeconds(0, 0);\n    var num_intervals = 5; //Math.ceil(24/hour_interval);\n    // if(num_intervals <2 ){num_intervals =  2}\n    // if (num_intervals > 10) { num_intervals = 10 }\n\n    for (let index = 0; index < num_intervals; index++) {\n      var t = new Date();\n      t.setTime(t.getTime() + (index * hour_interval * 60 * 60 * 1000));\n   \n      waterTimes[index] = t ;\n      node.warn(`time ${index} = ${t}`) \n    \n    }\n\n    var next_time = now.addHours(hour_interval);\n\n    node.warn(next_time)\n    \n \n\n  \n  node.warn(waterTimes);\n  \n  flow.set(\"autoWaterTimes\", waterTimes);\n  flow.set(\"last_auto_water_time\",waterTimes[0]);\n\n    // var date = new Date();\n    // var current_hour = date.getHours()\n\n    // var nextIndex = 0;\n    // // waterTimes.forEach((element, index) => {\n    // //     if(element> current_hour && nextIndex == 0){\n    // //         nextIndex = index;\n    // //     }\n    // // });\n\n    // flow.set(\"autoWaterNextIndex\", nextIndex);\n}\nelse{\n    flow.set(\"autoWaterTimes\", []);\n    flow.set(\"autoWaterNextIndex\", 0);\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 3180,
        "wires": [
            []
        ]
    },
    {
        "id": "351a7943012fb450",
        "type": "inject",
        "z": "26da8ec8a60a9d75",
        "name": "Manual",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "wtv",
        "payload": "60",
        "payloadType": "num",
        "x": 250,
        "y": 3120,
        "wires": [
            [
                "07404c31997e8d3b"
            ]
        ]
    },
    {
        "id": "08a68290d53b8e34",
        "type": "inject",
        "z": "26da8ec8a60a9d75",
        "name": "OnDeploy",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 170,
        "y": 2240,
        "wires": [
            [
                "d00c7191994ec6ed"
            ]
        ]
    },
    {
        "id": "37c66c6698ef2b26",
        "type": "debug",
        "z": "26da8ec8a60a9d75",
        "name": "debug 7",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 740,
        "y": 2880,
        "wires": []
    },
    {
        "id": "9c7ec0615cd6c756",
        "type": "function",
        "z": "26da8ec8a60a9d75",
        "name": "save watering intervals",
        "func": "flow.set(\"auto_water_intervals\", msg.payload)\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 3240,
        "wires": [
            [
                "be7a2917b80c8b59"
            ]
        ]
    },
    {
        "id": "077d2a87cb4fd3ce",
        "type": "ui_chart",
        "z": "26da8ec8a60a9d75",
        "name": "",
        "group": "49b8362b1f102d88",
        "order": 87,
        "width": 24,
        "height": 5,
        "label": "pump time active",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": true,
        "ymin": "",
        "ymax": "",
        "removeOlder": "48",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#5dbbfe",
            "#fe8f10",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 990,
        "y": 1760,
        "wires": [
            []
        ]
    },
    {
        "id": "b2ddbdb168e92d7c",
        "type": "function",
        "z": "26da8ec8a60a9d75",
        "name": "targetTemp getter",
        "func": "var p = msg.payload\nif(!p.hasOwnProperty(\"targetTemp\")){return;}\n\n\n\nreturn {\"topic\":\"targetTemp\", \"payload\":p[\"targetTemp\"]};",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 1840,
        "wires": [
            [
                "e5b757719c2e2960"
            ]
        ]
    },
    {
        "id": "e5b757719c2e2960",
        "type": "ui_numeric",
        "z": "26da8ec8a60a9d75",
        "name": "",
        "label": "target temp",
        "tooltip": "",
        "group": "49b8362b1f102d88",
        "order": 9,
        "width": 6,
        "height": 1,
        "wrap": false,
        "passthru": false,
        "topic": "topic",
        "topicType": "msg",
        "format": "{{value}}",
        "min": "15",
        "max": "30",
        "step": 1,
        "className": "",
        "x": 750,
        "y": 1840,
        "wires": [
            [
                "f905b48e41704e69"
            ]
        ]
    },
    {
        "id": "f905b48e41704e69",
        "type": "mqtt out",
        "z": "26da8ec8a60a9d75",
        "name": "",
        "topic": "box/control/heater/target",
        "qos": "",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "67b58dab33c9118c",
        "x": 970,
        "y": 1840,
        "wires": []
    },
    {
        "id": "82ce752ad34a4d0b",
        "type": "function",
        "z": "26da8ec8a60a9d75",
        "name": "heater for temp getter",
        "func": "var p = msg.payload\nif(!p.hasOwnProperty(\"HeaterForTemp\")){return;}\n\n\n\nreturn {\"topic\":\"HeaterForTemp\", \"payload\":p[\"HeaterForTemp\"]};",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 1900,
        "wires": [
            [
                "da1bf2195e57dffa"
            ]
        ]
    },
    {
        "id": "8e08e682a92b35dc",
        "type": "mqtt out",
        "z": "26da8ec8a60a9d75",
        "name": "",
        "topic": "box/control/heater/tempMode",
        "qos": "",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "67b58dab33c9118c",
        "x": 1000,
        "y": 1900,
        "wires": []
    },
    {
        "id": "da1bf2195e57dffa",
        "type": "ui_switch",
        "z": "26da8ec8a60a9d75",
        "name": "",
        "label": "heater For temp",
        "tooltip": "",
        "group": "49b8362b1f102d88",
        "order": 10,
        "width": 6,
        "height": 1,
        "passthru": false,
        "decouple": "false",
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "onvalue": "on",
        "onvalueType": "str",
        "onicon": "",
        "oncolor": "",
        "offvalue": "off",
        "offvalueType": "str",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 760,
        "y": 1900,
        "wires": [
            [
                "8e08e682a92b35dc"
            ]
        ]
    },
    {
        "id": "07404c31997e8d3b",
        "type": "function",
        "z": "26da8ec8a60a9d75",
        "name": "save auto water hour interval",
        "func": "flow.set(\"auto_water_hour_interval\",msg.payload)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 3180,
        "wires": [
            [
                "be7a2917b80c8b59"
            ]
        ]
    },
    {
        "id": "3c23d90194e82221",
        "type": "ui_text_input",
        "z": "26da8ec8a60a9d75",
        "name": "",
        "label": "auto water hour interval",
        "tooltip": "",
        "group": "49b8362b1f102d88",
        "order": 83,
        "width": 3,
        "height": 1,
        "passthru": false,
        "mode": "number",
        "delay": "1",
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 210,
        "y": 3180,
        "wires": [
            [
                "07404c31997e8d3b"
            ]
        ]
    },
    {
        "id": "6c4b94eb66b77b4a",
        "type": "function",
        "z": "26da8ec8a60a9d75",
        "name": "load watering schedule",
        "func": "var times = flow.get(\"autoWaterTimes\")\n\n// times.forEach((element, i) => {\n//     times[i] = element.slice(24);\n// });\n\n// times.forEach(function (part, index, times) {\n//     times[index] = part.slice(24);\n// });\n\nif(times){\n\nvar cleaned_times = []\n\nfor (let index = 0; index < times.length; index++) {\n    const element = times[index];\n    cleaned_times.push(element.toString().slice(0,24));\n}\n\nmsg.payload = cleaned_times.slice(1).join(\", \");\n\nreturn msg;\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 2560,
        "wires": [
            [
                "fb4bc3c0d4b03df5"
            ]
        ]
    },
    {
        "id": "fb4bc3c0d4b03df5",
        "type": "ui_text",
        "z": "26da8ec8a60a9d75",
        "group": "49b8362b1f102d88",
        "order": 85,
        "width": 24,
        "height": 1,
        "name": "",
        "label": "watering schedule",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 810,
        "y": 2560,
        "wires": []
    },
    {
        "id": "af7e195714624e2d",
        "type": "inject",
        "z": "26da8ec8a60a9d75",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "300",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "early_stop",
        "payload": "0",
        "payloadType": "num",
        "x": 660,
        "y": 1780,
        "wires": [
            [
                "077d2a87cb4fd3ce"
            ]
        ]
    },
    {
        "id": "1227f88fa210963b",
        "type": "function",
        "z": "26da8ec8a60a9d75",
        "name": "Low stability alert",
        "func": "\nvar stability = flow.get(\"stability\");\nvar name = flow.get(\"name\");\n\nif(stability > 50){return;}\n\n\n\nmsg.payload = {}\nmsg.payload.chatId = msg.TelegramClientID\nmsg.payload.type = \"message\"\nmsg.payload.content = `${name} Stability Low! (${stability})`\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 810,
        "y": 2260,
        "wires": [
            [
                "315891178173b158"
            ]
        ]
    },
    {
        "id": "5e73258ca3571246",
        "type": "delay",
        "z": "26da8ec8a60a9d75",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "hour",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": false,
        "outputs": 1,
        "x": 630,
        "y": 2260,
        "wires": [
            [
                "1227f88fa210963b"
            ]
        ]
    },
    {
        "id": "dbd625a1f01c401f",
        "type": "function",
        "z": "26da8ec8a60a9d75",
        "name": "HumidifierState getter",
        "func": "var p = msg.payload\n\nflow.set(\"humidifierState\", !!p[\"HU\"])\nreturn {\"topic\":\"humidifierState\", \"payload\": !!p[\"HU\"]}\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 660,
        "wires": [
            [
                "a662e965eeceaefc",
                "da9b8b6b10da9d70"
            ]
        ]
    },
    {
        "id": "9decaaf284226546",
        "type": "ui_switch",
        "z": "26da8ec8a60a9d75",
        "name": "",
        "label": "Humidifier State",
        "tooltip": "",
        "group": "49b8362b1f102d88",
        "order": 21,
        "width": 6,
        "height": 1,
        "passthru": false,
        "decouple": "true",
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "onvalue": "on",
        "onvalueType": "str",
        "onicon": "",
        "oncolor": "",
        "offvalue": "off",
        "offvalueType": "str",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 1040,
        "y": 640,
        "wires": [
            [
                "90ee8304487c0b01"
            ]
        ]
    },
    {
        "id": "90ee8304487c0b01",
        "type": "mqtt out",
        "z": "26da8ec8a60a9d75",
        "name": "",
        "topic": "box/control/humidifier",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "67b58dab33c9118c",
        "x": 1280,
        "y": 640,
        "wires": []
    },
    {
        "id": "7cf0bb684b914d9b",
        "type": "ui_chart",
        "z": "26da8ec8a60a9d75",
        "name": "",
        "group": "49b8362b1f102d88",
        "order": 31,
        "width": 12,
        "height": 3,
        "label": "Humidifer",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "24",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1020,
        "y": 680,
        "wires": [
            []
        ]
    },
    {
        "id": "428cd9c732977328",
        "type": "function",
        "z": "26da8ec8a60a9d75",
        "name": "auto HUmidifier getter",
        "func": "var p = msg.payload\nif(!p.hasOwnProperty(\"AHU\")){return;}\n\n\nreturn {\"payload\": !!p[\"ADU\"]};\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 2060,
        "wires": [
            [
                "4bae56fd60cac55d"
            ]
        ]
    },
    {
        "id": "4bae56fd60cac55d",
        "type": "ui_switch",
        "z": "26da8ec8a60a9d75",
        "name": "",
        "label": "auto Humidifier",
        "tooltip": "",
        "group": "49b8362b1f102d88",
        "order": 20,
        "width": 6,
        "height": 1,
        "passthru": false,
        "decouple": "false",
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "onvalue": "auto",
        "onvalueType": "str",
        "onicon": "",
        "oncolor": "",
        "offvalue": "man",
        "offvalueType": "str",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 820,
        "y": 2060,
        "wires": [
            [
                "067ff54dd4b268ab"
            ]
        ]
    },
    {
        "id": "067ff54dd4b268ab",
        "type": "mqtt out",
        "z": "26da8ec8a60a9d75",
        "name": "",
        "topic": "box/control/humidifier",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "67b58dab33c9118c",
        "x": 1040,
        "y": 2060,
        "wires": []
    },
    {
        "id": "a662e965eeceaefc",
        "type": "function",
        "z": "26da8ec8a60a9d75",
        "name": "function 1",
        "func": "if(msg.payload){\n    return {\"payload\":1};\n}\n\nreturn {\"payload\":0};",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 680,
        "wires": [
            [
                "7cf0bb684b914d9b",
                "185aead36a310ed9"
            ]
        ]
    },
    {
        "id": "da9b8b6b10da9d70",
        "type": "function",
        "z": "26da8ec8a60a9d75",
        "name": "function 2",
        "func": "var p = msg.payload;\nreturn {\n    \"payload\": p? \"on\" : \"off\"\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 640,
        "wires": [
            [
                "9decaaf284226546"
            ]
        ]
    },
    {
        "id": "54d762cf0c16f8c5",
        "type": "delay",
        "z": "26da8ec8a60a9d75",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "10",
        "rateUnits": "minute",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": false,
        "outputs": 1,
        "x": 1100,
        "y": 2140,
        "wires": [
            [
                "315891178173b158"
            ]
        ]
    },
    {
        "id": "6a6e4aff7e4751be",
        "type": "delay",
        "z": "26da8ec8a60a9d75",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "10",
        "rateUnits": "minute",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": false,
        "outputs": 1,
        "x": 1100,
        "y": 2180,
        "wires": [
            []
        ]
    },
    {
        "id": "5f589a96240e6454",
        "type": "delay",
        "z": "26da8ec8a60a9d75",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "10",
        "rateUnits": "minute",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": false,
        "outputs": 1,
        "x": 1100,
        "y": 2220,
        "wires": [
            [
                "315891178173b158"
            ]
        ]
    },
    {
        "id": "e3877934ff96e0c7",
        "type": "function",
        "z": "26da8ec8a60a9d75",
        "name": "Get soft min fan",
        "func": "var p = msg.payload\n\nif(p[\"softMinFan\"]){\n    return {\"topic\":\"softMinFan\",\n        \"payload\": p[\"softMinFan\"]\n    }\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 1680,
        "wires": [
            [
                "49462f73a7931232"
            ]
        ]
    },
    {
        "id": "49462f73a7931232",
        "type": "ui_text_input",
        "z": "26da8ec8a60a9d75",
        "name": "",
        "label": "soft min fan",
        "tooltip": "",
        "group": "49b8362b1f102d88",
        "order": 12,
        "width": 6,
        "height": 1,
        "passthru": false,
        "mode": "number",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 770,
        "y": 1680,
        "wires": [
            [
                "12cbd090934ffe40"
            ]
        ]
    },
    {
        "id": "12cbd090934ffe40",
        "type": "mqtt out",
        "z": "26da8ec8a60a9d75",
        "name": "",
        "topic": "box/control/exhaust/softMin",
        "qos": "",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "67b58dab33c9118c",
        "x": 1020,
        "y": 1680,
        "wires": []
    },
    {
        "id": "d13ce45a7650fd97",
        "type": "inject",
        "z": "26da8ec8a60a9d75",
        "name": "Reset charts",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1050,
        "y": 2580,
        "wires": [
            [
                "cb37643f3f2cefa2"
            ]
        ]
    },
    {
        "id": "cb37643f3f2cefa2",
        "type": "function",
        "z": "26da8ec8a60a9d75",
        "name": "function 3",
        "func": "msg.payload = []\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1120,
        "y": 2520,
        "wires": [
            [
                "3217b403c1c2f878",
                "8db30af22cf93342",
                "b9e7014a65e32c9f"
            ]
        ]
    },
    {
        "id": "a5ffbdd420de4581",
        "type": "ui_spacer",
        "z": "26da8ec8a60a9d75",
        "name": "spacer",
        "group": "64d3b198a43daa4d",
        "order": 3,
        "width": 1,
        "height": 1
    },
    {
        "id": "0fcd68dbe1e97b7b",
        "type": "ui_spacer",
        "z": "26da8ec8a60a9d75",
        "name": "spacer",
        "group": "64d3b198a43daa4d",
        "order": 5,
        "width": 1,
        "height": 1
    },
    {
        "id": "0ac3a11d39409d21",
        "type": "ui_spacer",
        "z": "26da8ec8a60a9d75",
        "name": "spacer",
        "group": "64d3b198a43daa4d",
        "order": 7,
        "width": 1,
        "height": 1
    },
    {
        "id": "402a3022116c5861",
        "type": "ui_spacer",
        "z": "26da8ec8a60a9d75",
        "name": "spacer",
        "group": "64d3b198a43daa4d",
        "order": 9,
        "width": 1,
        "height": 1
    },
    {
        "id": "3896de780cc8cc88",
        "type": "ui_spacer",
        "z": "26da8ec8a60a9d75",
        "name": "spacer",
        "group": "64d3b198a43daa4d",
        "order": 11,
        "width": 1,
        "height": 1
    },
    {
        "id": "7687bd01e4b2d8e8",
        "type": "ui_spacer",
        "z": "26da8ec8a60a9d75",
        "name": "spacer",
        "group": "64d3b198a43daa4d",
        "order": 15,
        "width": 1,
        "height": 1
    },
    {
        "id": "8573b36e58da363f",
        "type": "ui_spacer",
        "z": "26da8ec8a60a9d75",
        "name": "spacer",
        "group": "64d3b198a43daa4d",
        "order": 19,
        "width": 2,
        "height": 1
    },
    {
        "id": "cb235201d0a74a5b",
        "type": "ui_spacer",
        "z": "26da8ec8a60a9d75",
        "name": "spacer",
        "group": "64d3b198a43daa4d",
        "order": 21,
        "width": 1,
        "height": 1
    },
    {
        "id": "ce1de8cf86f13a0e",
        "type": "ui_spacer",
        "z": "26da8ec8a60a9d75",
        "name": "spacer",
        "group": "64d3b198a43daa4d",
        "order": 22,
        "width": 1,
        "height": 1
    },
    {
        "id": "c0f973ef91d5ae67",
        "type": "ui_spacer",
        "z": "26da8ec8a60a9d75",
        "name": "spacer",
        "group": "64d3b198a43daa4d",
        "order": 23,
        "width": 1,
        "height": 1
    },
    {
        "id": "7a06a6ca4111fc39",
        "type": "ui_spacer",
        "z": "26da8ec8a60a9d75",
        "name": "spacer",
        "group": "64d3b198a43daa4d",
        "order": 25,
        "width": 1,
        "height": 1
    },
    {
        "id": "8d4a8c2fe8273755",
        "type": "ui_spacer",
        "z": "26da8ec8a60a9d75",
        "name": "spacer",
        "group": "64d3b198a43daa4d",
        "order": 27,
        "width": 1,
        "height": 1
    },
    {
        "id": "e75a4479014c37a3",
        "type": "ui_spacer",
        "z": "26da8ec8a60a9d75",
        "name": "spacer",
        "group": "64d3b198a43daa4d",
        "order": 29,
        "width": 1,
        "height": 1
    },
    {
        "id": "d193508113740770",
        "type": "ui_spacer",
        "z": "26da8ec8a60a9d75",
        "name": "spacer",
        "group": "64d3b198a43daa4d",
        "order": 32,
        "width": 1,
        "height": 1
    },
    {
        "id": "21b81f5e1322a970",
        "type": "ui_spacer",
        "z": "26da8ec8a60a9d75",
        "name": "spacer",
        "group": "64d3b198a43daa4d",
        "order": 33,
        "width": 1,
        "height": 1
    },
    {
        "id": "4d54e48b1e6319c5",
        "type": "ui_spacer",
        "z": "26da8ec8a60a9d75",
        "name": "spacer",
        "group": "64d3b198a43daa4d",
        "order": 34,
        "width": 1,
        "height": 1
    },
    {
        "id": "5d5fe9f7e187c6c8",
        "type": "ui_spacer",
        "z": "26da8ec8a60a9d75",
        "name": "spacer",
        "group": "64d3b198a43daa4d",
        "order": 39,
        "width": 1,
        "height": 1
    },
    {
        "id": "9020abcf72eef21b",
        "type": "ui_spacer",
        "z": "26da8ec8a60a9d75",
        "name": "spacer",
        "group": "64d3b198a43daa4d",
        "order": 41,
        "width": 1,
        "height": 1
    },
    {
        "id": "46252b2826773aa5",
        "type": "ui_spacer",
        "z": "26da8ec8a60a9d75",
        "name": "spacer",
        "group": "64d3b198a43daa4d",
        "order": 42,
        "width": 5,
        "height": 1
    },
    {
        "id": "d3b08359e81d7e5a",
        "type": "ui_spacer",
        "z": "26da8ec8a60a9d75",
        "name": "spacer",
        "group": "64d3b198a43daa4d",
        "order": 44,
        "width": 5,
        "height": 1
    },
    {
        "id": "c37f9696544aca90",
        "type": "ui_spacer",
        "z": "26da8ec8a60a9d75",
        "name": "spacer",
        "group": "64d3b198a43daa4d",
        "order": 47,
        "width": 2,
        "height": 1
    },
    {
        "id": "a0cca4b392fb63dc",
        "type": "ui_spacer",
        "z": "26da8ec8a60a9d75",
        "name": "spacer",
        "group": "64d3b198a43daa4d",
        "order": 49,
        "width": 2,
        "height": 1
    },
    {
        "id": "4c33814953c7bb34",
        "type": "ui_spacer",
        "z": "26da8ec8a60a9d75",
        "name": "spacer",
        "group": "64d3b198a43daa4d",
        "order": 51,
        "width": 2,
        "height": 1
    },
    {
        "id": "cd8ef6b11219112e",
        "type": "ui_spacer",
        "z": "26da8ec8a60a9d75",
        "name": "spacer",
        "group": "64d3b198a43daa4d",
        "order": 52,
        "width": 8,
        "height": 1
    },
    {
        "id": "42a8e34b5978361f",
        "type": "ui_spacer",
        "z": "26da8ec8a60a9d75",
        "name": "spacer",
        "group": "64d3b198a43daa4d",
        "order": 53,
        "width": 8,
        "height": 1
    },
    {
        "id": "2ee9254cd9790d20",
        "type": "ui_spacer",
        "z": "26da8ec8a60a9d75",
        "name": "spacer",
        "group": "64d3b198a43daa4d",
        "order": 54,
        "width": 8,
        "height": 1
    },
    {
        "id": "60b725977c62ff89",
        "type": "ui_spacer",
        "z": "26da8ec8a60a9d75",
        "name": "spacer",
        "group": "64d3b198a43daa4d",
        "order": 55,
        "width": 8,
        "height": 1
    },
    {
        "id": "a88448b325c0dfd8",
        "type": "ui_spacer",
        "z": "26da8ec8a60a9d75",
        "name": "spacer",
        "group": "64d3b198a43daa4d",
        "order": 60,
        "width": 1,
        "height": 1
    },
    {
        "id": "447becf1f09713ae",
        "type": "ui_spacer",
        "z": "26da8ec8a60a9d75",
        "name": "spacer",
        "group": "64d3b198a43daa4d",
        "order": 61,
        "width": 1,
        "height": 1
    },
    {
        "id": "c7725a9f10323e2b",
        "type": "ui_spacer",
        "z": "26da8ec8a60a9d75",
        "name": "spacer",
        "group": "64d3b198a43daa4d",
        "order": 62,
        "width": 1,
        "height": 1
    },
    {
        "id": "47d9f484fc3b476e",
        "type": "ui_spacer",
        "z": "26da8ec8a60a9d75",
        "name": "spacer",
        "group": "64d3b198a43daa4d",
        "order": 63,
        "width": 1,
        "height": 1
    },
    {
        "id": "ad2ccf025d664dc6",
        "type": "ui_spacer",
        "z": "26da8ec8a60a9d75",
        "name": "spacer",
        "group": "64d3b198a43daa4d",
        "order": 64,
        "width": 1,
        "height": 1
    },
    {
        "id": "71394fbb1db0439d",
        "type": "ui_spacer",
        "z": "26da8ec8a60a9d75",
        "name": "spacer",
        "group": "64d3b198a43daa4d",
        "order": 66,
        "width": 1,
        "height": 1
    },
    {
        "id": "4ca97652627579ef",
        "type": "ui_spacer",
        "z": "26da8ec8a60a9d75",
        "name": "spacer",
        "group": "64d3b198a43daa4d",
        "order": 68,
        "width": 1,
        "height": 1
    },
    {
        "id": "78299a97b063df97",
        "type": "ui_spacer",
        "z": "26da8ec8a60a9d75",
        "name": "spacer",
        "group": "64d3b198a43daa4d",
        "order": 69,
        "width": 1,
        "height": 1
    },
    {
        "id": "c4471ff90a87fc89",
        "type": "ui_spacer",
        "z": "26da8ec8a60a9d75",
        "name": "spacer",
        "group": "64d3b198a43daa4d",
        "order": 70,
        "width": 1,
        "height": 1
    },
    {
        "id": "d58dc74072c46d31",
        "type": "ui_spacer",
        "z": "26da8ec8a60a9d75",
        "name": "spacer",
        "group": "64d3b198a43daa4d",
        "order": 71,
        "width": 1,
        "height": 1
    },
    {
        "id": "8d96db9cedb5c92c",
        "type": "ui_spacer",
        "z": "26da8ec8a60a9d75",
        "name": "spacer",
        "group": "64d3b198a43daa4d",
        "order": 72,
        "width": 8,
        "height": 1
    },
    {
        "id": "0a159627e11f1eaa",
        "type": "ui_spacer",
        "z": "26da8ec8a60a9d75",
        "name": "spacer",
        "group": "64d3b198a43daa4d",
        "order": 73,
        "width": 8,
        "height": 1
    },
    {
        "id": "de9662933615bad4",
        "type": "ui_spacer",
        "z": "26da8ec8a60a9d75",
        "name": "spacer",
        "group": "64d3b198a43daa4d",
        "order": 75,
        "width": 8,
        "height": 1
    },
    {
        "id": "920e38c90c8b1447",
        "type": "ui_spacer",
        "z": "26da8ec8a60a9d75",
        "name": "spacer",
        "group": "64d3b198a43daa4d",
        "order": 76,
        "width": 8,
        "height": 1
    },
    {
        "id": "aabab3bdb12063e0",
        "type": "ui_spacer",
        "z": "26da8ec8a60a9d75",
        "name": "spacer",
        "group": "64d3b198a43daa4d",
        "order": 77,
        "width": 8,
        "height": 1
    },
    {
        "id": "d43148e26088492a",
        "type": "ui_spacer",
        "z": "26da8ec8a60a9d75",
        "name": "spacer",
        "group": "64d3b198a43daa4d",
        "order": 78,
        "width": 8,
        "height": 1
    },
    {
        "id": "8bb4790ea0239663",
        "type": "ui_spacer",
        "z": "26da8ec8a60a9d75",
        "name": "spacer",
        "group": "64d3b198a43daa4d",
        "order": 79,
        "width": 8,
        "height": 1
    },
    {
        "id": "e8c3d0730f17de7a",
        "type": "ui_spacer",
        "z": "26da8ec8a60a9d75",
        "name": "spacer",
        "group": "64d3b198a43daa4d",
        "order": 80,
        "width": 8,
        "height": 1
    },
    {
        "id": "9791d6d2439bcca2",
        "type": "ui_spacer",
        "z": "26da8ec8a60a9d75",
        "name": "spacer",
        "group": "64d3b198a43daa4d",
        "order": 81,
        "width": 8,
        "height": 1
    },
    {
        "id": "37458a55c0e577bc",
        "type": "ui_spacer",
        "z": "26da8ec8a60a9d75",
        "name": "spacer",
        "group": "64d3b198a43daa4d",
        "order": 83,
        "width": 6,
        "height": 1
    },
    {
        "id": "e2b6939385f6b6bf",
        "type": "ui_spacer",
        "z": "26da8ec8a60a9d75",
        "name": "spacer",
        "group": "64d3b198a43daa4d",
        "order": 84,
        "width": 6,
        "height": 1
    },
    {
        "id": "3ddb17e2f37feb07",
        "type": "ui_spacer",
        "z": "26da8ec8a60a9d75",
        "name": "spacer",
        "group": "64d3b198a43daa4d",
        "order": 85,
        "width": 6,
        "height": 1
    },
    {
        "id": "6bf1c839082f54d6",
        "type": "ui_spacer",
        "z": "26da8ec8a60a9d75",
        "name": "spacer",
        "group": "64d3b198a43daa4d",
        "order": 86,
        "width": 6,
        "height": 1
    },
    {
        "id": "0145a198015f184c",
        "type": "ui_spacer",
        "z": "26da8ec8a60a9d75",
        "name": "spacer",
        "group": "64d3b198a43daa4d",
        "order": 87,
        "width": 6,
        "height": 1
    },
    {
        "id": "bf49913ff3862233",
        "type": "ui_spacer",
        "z": "26da8ec8a60a9d75",
        "name": "spacer",
        "group": "64d3b198a43daa4d",
        "order": 89,
        "width": 6,
        "height": 1
    },
    {
        "id": "217b011f43152b6c",
        "type": "ui_spacer",
        "z": "26da8ec8a60a9d75",
        "name": "spacer",
        "group": "64d3b198a43daa4d",
        "order": 90,
        "width": 6,
        "height": 1
    },
    {
        "id": "6cf37d3b325264c4",
        "type": "ui_spacer",
        "z": "26da8ec8a60a9d75",
        "name": "spacer",
        "group": "64d3b198a43daa4d",
        "order": 91,
        "width": 6,
        "height": 1
    },
    {
        "id": "6e56510a181f07c1",
        "type": "ui_spacer",
        "z": "26da8ec8a60a9d75",
        "name": "spacer",
        "group": "64d3b198a43daa4d",
        "order": 92,
        "width": 6,
        "height": 1
    },
    {
        "id": "808a2fdb0510bda4",
        "type": "ui_spacer",
        "z": "26da8ec8a60a9d75",
        "name": "spacer",
        "group": "64d3b198a43daa4d",
        "order": 93,
        "width": 6,
        "height": 1
    },
    {
        "id": "ec3c041975aabb60",
        "type": "ui_spacer",
        "z": "26da8ec8a60a9d75",
        "name": "spacer",
        "group": "64d3b198a43daa4d",
        "order": 95,
        "width": 6,
        "height": 1
    },
    {
        "id": "2b16cdc72daea456",
        "type": "ui_spacer",
        "z": "26da8ec8a60a9d75",
        "name": "spacer",
        "group": "64d3b198a43daa4d",
        "order": 96,
        "width": 6,
        "height": 1
    },
    {
        "id": "72ba75f29c017bd4",
        "type": "ui_spacer",
        "z": "26da8ec8a60a9d75",
        "name": "spacer",
        "group": "64d3b198a43daa4d",
        "order": 97,
        "width": 6,
        "height": 1
    },
    {
        "id": "31f75d5401987f6b",
        "type": "ui_spacer",
        "z": "26da8ec8a60a9d75",
        "name": "spacer",
        "group": "64d3b198a43daa4d",
        "order": 98,
        "width": 6,
        "height": 1
    },
    {
        "id": "7366fc4b3e0b09bf",
        "type": "ui_spacer",
        "z": "26da8ec8a60a9d75",
        "name": "spacer",
        "group": "64d3b198a43daa4d",
        "order": 99,
        "width": 6,
        "height": 1
    },
    {
        "id": "b15d327c3b5a0715",
        "type": "ui_spacer",
        "z": "26da8ec8a60a9d75",
        "name": "spacer",
        "group": "49b8362b1f102d88",
        "order": 45,
        "width": 24,
        "height": 1
    },
    {
        "id": "26129536cf7fadef",
        "type": "ui_spacer",
        "z": "26da8ec8a60a9d75",
        "name": "spacer",
        "group": "49b8362b1f102d88",
        "order": 46,
        "width": 24,
        "height": 1
    },
    {
        "id": "4afecb2e2721db09",
        "type": "ui_spacer",
        "z": "26da8ec8a60a9d75",
        "name": "spacer",
        "group": "49b8362b1f102d88",
        "order": 52,
        "width": 10,
        "height": 1
    },
    {
        "id": "1e0bbe271f3022e0",
        "type": "ui_spacer",
        "z": "26da8ec8a60a9d75",
        "name": "spacer",
        "group": "49b8362b1f102d88",
        "order": 53,
        "width": 10,
        "height": 1
    },
    {
        "id": "5f23a818033e81c9",
        "type": "ui_spacer",
        "z": "26da8ec8a60a9d75",
        "name": "spacer",
        "group": "49b8362b1f102d88",
        "order": 54,
        "width": 10,
        "height": 1
    },
    {
        "id": "645708260be2760f",
        "type": "ui_spacer",
        "z": "26da8ec8a60a9d75",
        "name": "spacer",
        "group": "49b8362b1f102d88",
        "order": 55,
        "width": 10,
        "height": 1
    },
    {
        "id": "e64d4f45a0fc308c",
        "type": "ui_spacer",
        "z": "26da8ec8a60a9d75",
        "name": "spacer",
        "group": "49b8362b1f102d88",
        "order": 56,
        "width": 10,
        "height": 1
    },
    {
        "id": "aa64b22af50a5fb5",
        "type": "ui_spacer",
        "z": "26da8ec8a60a9d75",
        "name": "spacer",
        "group": "49b8362b1f102d88",
        "order": 57,
        "width": 10,
        "height": 1
    },
    {
        "id": "1a00c32b4f543e0d",
        "type": "ui_spacer",
        "z": "26da8ec8a60a9d75",
        "name": "spacer",
        "group": "49b8362b1f102d88",
        "order": 59,
        "width": 4,
        "height": 1
    },
    {
        "id": "1b6ff61a2531c670",
        "type": "ui_spacer",
        "z": "26da8ec8a60a9d75",
        "name": "spacer",
        "group": "49b8362b1f102d88",
        "order": 60,
        "width": 4,
        "height": 1
    },
    {
        "id": "87da151e02cb282d",
        "type": "ui_spacer",
        "z": "26da8ec8a60a9d75",
        "name": "spacer",
        "group": "49b8362b1f102d88",
        "order": 61,
        "width": 4,
        "height": 1
    },
    {
        "id": "86ccbec8ae7837ca",
        "type": "ui_spacer",
        "z": "26da8ec8a60a9d75",
        "name": "spacer",
        "group": "49b8362b1f102d88",
        "order": 62,
        "width": 4,
        "height": 1
    },
    {
        "id": "f820b219d65b2d20",
        "type": "ui_spacer",
        "z": "26da8ec8a60a9d75",
        "name": "spacer",
        "group": "49b8362b1f102d88",
        "order": 63,
        "width": 4,
        "height": 1
    },
    {
        "id": "5102564e65305584",
        "type": "ui_spacer",
        "z": "26da8ec8a60a9d75",
        "name": "spacer",
        "group": "49b8362b1f102d88",
        "order": 64,
        "width": 4,
        "height": 1
    },
    {
        "id": "429bad75182150f7",
        "type": "ui_spacer",
        "z": "26da8ec8a60a9d75",
        "name": "spacer",
        "group": "49b8362b1f102d88",
        "order": 65,
        "width": 4,
        "height": 1
    },
    {
        "id": "d5d39d5b823dd1d1",
        "type": "ui_spacer",
        "z": "26da8ec8a60a9d75",
        "name": "spacer",
        "group": "49b8362b1f102d88",
        "order": 67,
        "width": 4,
        "height": 1
    },
    {
        "id": "f82d030796ecf273",
        "type": "ui_spacer",
        "z": "26da8ec8a60a9d75",
        "name": "spacer",
        "group": "49b8362b1f102d88",
        "order": 71,
        "width": 4,
        "height": 1
    },
    {
        "id": "bfa36448f636b5d9",
        "type": "ui_spacer",
        "z": "26da8ec8a60a9d75",
        "name": "spacer",
        "group": "49b8362b1f102d88",
        "order": 72,
        "width": 4,
        "height": 1
    },
    {
        "id": "79472198d7bb8fe2",
        "type": "ui_spacer",
        "z": "26da8ec8a60a9d75",
        "name": "spacer",
        "group": "49b8362b1f102d88",
        "order": 73,
        "width": 4,
        "height": 1
    },
    {
        "id": "abbcec20578f5412",
        "type": "ui_spacer",
        "z": "26da8ec8a60a9d75",
        "name": "spacer",
        "group": "49b8362b1f102d88",
        "order": 75,
        "width": 4,
        "height": 1
    },
    {
        "id": "150c040632c1d49b",
        "type": "ui_spacer",
        "z": "26da8ec8a60a9d75",
        "name": "spacer",
        "group": "49b8362b1f102d88",
        "order": 76,
        "width": 4,
        "height": 1
    },
    {
        "id": "d5f2ad4ddcb9435d",
        "type": "ui_spacer",
        "z": "26da8ec8a60a9d75",
        "name": "spacer",
        "group": "49b8362b1f102d88",
        "order": 77,
        "width": 4,
        "height": 1
    },
    {
        "id": "9e737ff73e9cf414",
        "type": "ui_spacer",
        "z": "26da8ec8a60a9d75",
        "name": "spacer",
        "group": "49b8362b1f102d88",
        "order": 78,
        "width": 4,
        "height": 1
    },
    {
        "id": "fcc3d13b904ee24c",
        "type": "ui_spacer",
        "z": "26da8ec8a60a9d75",
        "name": "spacer",
        "group": "49b8362b1f102d88",
        "order": 79,
        "width": 4,
        "height": 1
    },
    {
        "id": "077b3ce0b12b0d20",
        "type": "ui_spacer",
        "z": "26da8ec8a60a9d75",
        "name": "spacer",
        "group": "49b8362b1f102d88",
        "order": 84,
        "width": 13,
        "height": 1
    },
    {
        "id": "67b58dab33c9118c",
        "type": "mqtt-broker",
        "name": "MQHIVE",
        "broker": "fa0e1a004876435d9dd9ccca0e0d3a83.s1.eu.hivemq.cloud",
        "port": "8883",
        "tls": "",
        "clientid": "fan",
        "autoConnect": true,
        "usetls": true,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "49b8362b1f102d88",
        "type": "ui_group",
        "name": "Environment",
        "tab": "b784527878a002f6",
        "order": 1,
        "disp": true,
        "width": 24,
        "collapse": false,
        "className": ""
    },
    {
        "id": "353ee16983fbc803",
        "type": "telegram bot",
        "botname": "EnvironControllerAlert_bot",
        "usernames": "",
        "chatids": "",
        "baseapiurl": "",
        "updatemode": "polling",
        "pollinterval": "300",
        "usesocks": false,
        "sockshost": "",
        "socksport": "6667",
        "socksusername": "anonymous",
        "sockspassword": "",
        "bothost": "",
        "botpath": "",
        "localbotport": "8443",
        "publicbotport": "8443",
        "privatekey": "",
        "certificate": "",
        "useselfsignedcertificate": false,
        "sslterminated": false,
        "verboselogging": false
    },
    {
        "id": "64d3b198a43daa4d",
        "type": "ui_group",
        "name": "Default",
        "tab": "9f7b94a4d054cd9a",
        "order": 1,
        "disp": true,
        "width": "23",
        "collapse": false,
        "className": ""
    },
    {
        "id": "b784527878a002f6",
        "type": "ui_tab",
        "name": "Flowerbox",
        "icon": "dashboard",
        "order": 2,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "9f7b94a4d054cd9a",
        "type": "ui_tab",
        "name": "Seedbox",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    }
]